%%%% trn=tsn
%%% 10.2.2016
%%% function defenition for optimization purposes using GA
function TRM=optimgafittsnequaltrn(XXX)
lambdag=XXX(1);
tslambda=XXX(2);
%trlambda=XXX(3);
Dor=XXX(3)/1000;
%L=XXX(5)/1000;
epepep=XXX(4);
tetaonon=XXX(5);
%tetaonon=0;


% clear all
% clc
% lambdag=99.99;
% tslambda=0.381;
% trlambda=0.38;
% Dor=100/1000;
% %L=XXX(5)/1000;
% epepep=106.53;
% tetaonon=24.44;
% %tetaonon=0;




%%% run below line at first
%%%iterations=4000;
global iterations inin TT MMM TM eff pfun Dostat Dshaftt pfun2 stackL Hstatortooth Hrotortooth Nturn coreloss Culoss losstotal Iavginput powerout gap pfun3 WireD Resistance2pole
iterations=iterations+1


%%% 15.12.2015
%%%Optimization program


%%% pay attention to feasibility of g value

%%%%%% A factor of 1.4 has been added to FL calculation(It has to be removed)

%%% friction torque must be added Yilmaz Goynk page 123 and 124
%%%    Dynamic Calculations of SRM motor with chopping consideration 

%%% parallel structure for each phase windings is considered (two windings in series are parallel with other windings of a phase)


%%% end leakage correction is not considered

%%If we have a magnetic shaft effects in MMF drop on rotor back core (in
%%Brbc calculation) NOT CONSIDERED


%%% pay attention in enterring phase resistance(number of poles and parallel branches has to be taken into account)

clc
iterations=iterations
%clear all


%% Neural network training


% 
% input =readtable('inputnn.xlsx');
% output =readtable('outputnn.xlsx');
% 
% intrain = transpose(table2array(input));
% outttrain =transpose(table2array(output));
% 
% 
% for i=1:41580
% if outttrain (3,i)<0
%     
%    outttrain (3,i)=0;
% end
% end
% 
% outtrain1=outttrain(1,:);
% outtrain2=outttrain(2,:);
% outtrain3=outttrain(3,:);
% 
% 
% 
% 
% nett1 = newff(intrain,outtrain1,300,{},'trainlm');
% nett1 = train(nett1,intrain,outtrain1);
% 
% 
% nett2 = newff(intrain,outtrain2,100,{},'trainlm');
% nett2 = train(nett2,intrain,outtrain2);
% 
% 
% nett3 = newff(intrain,outtrain3,100,{},'trainbr');
% nett3 = train(nett3,intrain,outtrain3);


% load('nettt1')
% load('nettt2')
% load('nettt3')

inputlambdag=[40 55 70 85 100 125 150 175 200 225 250];
inputt=[40 0.3;40 0.4;40 0.5;55 0.3;55 0.4;55 0.5;70 0.3;70 0.4;70 0.5;85 0.3;85 0.4;85 0.5;100 0.3;100 0.4;100 0.5;125 0.3;125 0.4;125 0.5;150 0.3;150 0.4;150 0.5;175 0.3;175 0.4;175 0.5;200 0.3;200 0.4;200 0.5;225 0.3;225 0.4;225 0.5;250 0.3;250 0.4;250 0.5];
MMMFF=[-142.655462248190,1936.56626212138,831.203978858439,-7264.63030687945,-4831.10277595636,-682.579161591082,11122.3160014514,13820.2973124419,2335.93714624476,718.578154690983,-7279.97386893578,-11313.8157196730,-4267.20719784906,81.3608816527781,-610.676772115243,1611.99521912489,2721.28540438070,2047.18901448659,194.024923913359,-142.544130643554,210.843890122002;-202.834832282875,2605.23137849179,1101.22615198059,-8920.50220421344,-4864.63426600422,-1597.49041757205,10895.9695383270,13863.1109964894,711.488685227690,2359.67690031875,-4154.17501812842,-11279.2377040627,-3349.13389277379,1398.83324883864,-1788.50749567848,-316.877026223699,3256.22257125698,1252.15345308732,75.5847227178401,-437.455426063043,496.370114948025;-176.927728301862,1976.73595115665,1174.61063658101,-7452.61048580736,-2012.26023383394,-2546.01948415030,10105.3409359817,8989.78480218422,-2741.64320937232,4233.96799726674,-5173.65927096824,-8280.33837937401,-395.056182984120,3022.05002781293,-3101.30788775360,566.236865182043,2648.76913846484,327.073521956027,-413.198419749174,-699.638285023439,804.025689009882;-235.179917249326,2195.81568634962,1265.00314158215,-7241.24718217199,-6650.67781788737,-1317.36433550038,10607.2114291725,15708.1671479259,4450.22300835344,827.533036670395,-6873.94419436425,-11918.1439393768,-5715.35818060232,-763.463352055632,-413.380501314571,1550.85895072175,2590.61596328280,2480.56264893320,403.475738267227,-27.2065062843619,127.481271495557;-389.843413001168,3781.79960948636,1838.26338763849,-10725.2627835849,-9310.11868908231,-2443.97468293475,10963.3300511178,20104.5895262268,4820.35901054577,2397.20936919606,-2629.46540387717,-14097.4930537222,-7392.84620446058,100.806770552805,-1469.58555103593,-1091.43244411024,3445.90733432154,2359.71376689637,736.245935497248,-318.374416078363,378.061910794144;-464.866933515761,3681.76949875774,2440.41658126505,-10003.4760481431,-8424.39402170572,-4311.17258060356,10223.9638807611,17988.3820240904,3082.09192630970,5020.75967650945,-3346.90619749244,-12129.0987736426,-6416.32463785832,1265.80929224392,-3074.74026280391,-281.841970711477,2833.20523738964,1914.92038541169,626.904139388170,-564.652867483629,727.932453617846;-278.169932297281,1681.13889118592,1517.94629913866,-3872.01563643079,-7023.49618945997,-1622.74608686563,3466.74706940843,14558.3234309552,5669.95397380108,675.509940009246,-293.061858460928,-10183.8032369733,-5882.51694820381,-1476.62583537100,-136.651764986826,-646.413765947381,1656.88930736258,2631.65020195697,419.924618991299,102.605788433506,44.0223759599604;-551.441768366930,4485.03121152395,2389.04498208273,-10826.0860021874,-12263.6626115644,-2809.49597292649,8081.09363019469,23663.4770413005,7801.11879962459,1919.56917847393,1632.28274052582,-15839.3287580503,-9500.52216521457,-1090.44989135032,-909.573247932864,-2860.68573596349,3514.88031172657,3085.99159416724,1019.14150679509,-146.739448825504,225.623768821067;-718.570812654180,5389.13610115452,3221.41315321784,-12976.5469257082,-13632.3196023951,-4677.25031739342,10928.6466134716,26039.9060237434,7379.49435001430,4259.15972985071,-1194.44104402056,-17502.8406154184,-10108.3555383264,-200.458833681983,-2295.28838560329,-1558.72500990343,3942.94972772640,3281.82924928702,1018.22586138370,-364.949892476948,524.125831800077;-290.152003784351,1434.06139604407,1591.71183468862,-3616.47265130460,-6530.90305977537,-1719.57982358876,4743.51996262938,12605.6509817140,6002.41581515580,520.399588572044,-2524.27164476495,-8862.58214314564,-5106.23416953419,-1920.24364059810,57.2433402214578,362.831050144839,1314.38367093630,2407.49006456887,322.901991005962,208.885150434863,-10.3759722336436;-714.795323099644,5127.90795474177,2960.79001895936,-12371.2670931695,-14037.3412845338,-3300.14042450799,11075.0093790235,24492.4414989343,10159.2400499376,1644.28964253696,-1481.16612914681,-15870.8716408813,-10106.0458071506,-2338.29037622498,-481.350051322390,-1597.07931007047,3281.33691951145,3270.37216669449,1104.27391811602,85.8956247724266,106.317103840663;-1045.86700315744,6921.76574062029,4313.50013693996,-15209.5936320694,-18286.4948200267,-5452.14673754925,12056.3373868518,30283.6146058056,12361.9422258392,3659.24506017805,-946.650659432673,-19211.2814411326,-12596.3840731592,-2422.13979847400,-1516.22632921269,-1800.20237020657,4001.60475707373,3881.45599724269,1444.12391082316,-12.3192355721458,318.004956068925;-204.141682328529,292.111494031205,1423.45078902786,340.627471624718,-4700.13811730867,-1753.21636394995,-1760.40968384987,9004.16615417492,5117.31070289560,619.593663055815,2738.36140646781,-6320.67741921603,-3732.31641530756,-1861.64804083405,38.9497573089382,-1259.83953774786,500.260292845748,2092.07129361809,140.991946534522,234.614098219682,-17.1048862341787;-816.177125389693,4673.20003621131,3391.58036126472,-8940.47280165344,-14041.7411550705,-3823.26891215684,3522.52244410637,22364.5836151611,11018.9475491208,1676.48085326463,5743.34155306871,-13670.0996941218,-9518.38889933847,-3016.01310701312,-294.889348049555,-4082.35300133892,2313.83995481479,3176.68218412860,1011.17870384570,232.022183738683,43.4199002524789;-1427.44319883498,7349.21948596951,5725.72412477544,-11636.0480184967,-21491.6171735438,-6861.25922945492,2203.28587015147,29912.5511590643,16440.1085215115,3737.11435405313,8288.68987183329,-15829.5336760134,-13868.8499340046,-4311.63416451256,-1101.87738495901,-4701.84908883734,2026.65729328579,4090.89689946375,1694.13744275523,289.907586814722,187.304124581894;49.0822686662133,-1427.06540702958,778.681531272886,3760.96049486973,-1089.56486466550,-1404.04736128971,-4251.29479302047,3187.50559227598,3079.80503809756,637.890424195315,3007.59944540508,-2776.81868922263,-1468.11240748965,-1489.93125853663,-5.01495940178831,-977.185608094253,-252.803430215646,1378.62512556087,-80.3602011351580,224.445587531051,-14.8374895249764;-902.093312513426,4141.12901697855,3737.96032109911,-7410.43396984054,-12463.8956785950,-4430.08659484551,2191.09810560189,18066.6884444312,10587.4992442345,1959.07669706054,6300.37918091739,-10916.6543860985,-7411.15193696310,-3405.67489337449,-264.244481830634,-4154.70396361672,1512.97812097501,2694.08621932075,693.707273291816,374.198298119100,10.4170352700256;-2049.64430486997,8345.24435842758,7702.97559129806,-10993.7079607240,-23819.1440658846,-8867.30131858974,-256.073401777205,27475.8347404336,19586.3896568804,4166.64878370454,10550.1758706539,-12974.9932744457,-12707.8036595122,-6164.25955593829,-805.430214203598,-5383.76527870717,990.966306983149,3647.59776247143,1518.07198727340,656.680959401210,74.2083945490092;358.221175114306,-2820.36700363883,-29.7622579684264,5388.48647287473,1790.72774934487,-775.812310831682,-3720.55022225012,-206.939457073745,1307.17146630519,476.442165419362,1245.71980589663,-1659.51760570828,5.26713647074089,-1047.17367039135,-12.7703751487528,-323.637447895156,114.259177798849,737.191519581324,-155.034594267046,178.400371374783,-11.0407478709384;-755.392323830429,3273.84169857085,3319.29200453393,-7255.02372905557,-10162.8568452305,-4145.81311779458,5554.98761888281,14721.0929348109,9485.35253569799,1865.67349957987,2129.66669295883,-10333.0042619637,-5613.07677227782,-3357.59993128775,-226.311155655448,-2795.13977798745,2394.83268418317,1787.77568359813,622.097329897828,400.259352596652,-2.31115280165047;-2608.98987708622,10181.7196670872,9259.50102801868,-15900.4885258020,-26839.0269174688,-10437.4696204643,9353.59645114712,29260.1509703460,22488.7265575282,4713.91729984770,1868.03566705864,-15036.6280637203,-12943.7767022033,-7450.37398488564,-779.473017605590,-2658.69450596348,2487.90543921747,3104.76636515270,1747.58166445482,847.545576047643,37.4548242805808;767.647395142681,-4250.55251870070,-1066.62713924035,6657.15710600866,5006.18443030577,36.7522215961263,-2865.89795907389,-3490.26109381461,-1016.00796998566,271.442550077020,-1054.12490308935,267.426400331611,1240.65943228585,-356.773604859897,-27.7096696128136,886.052988983671,-680.621449465215,640.961046573958,-338.231829657171,106.106583759485,-3.73058961644172;-290.252650952531,1252.56005576619,1984.44184522259,-5061.48356350059,-4459.48150390160,-3044.51902391682,5377.31267199557,8033.68253462376,5101.10770721070,1572.62825276340,1220.24878749779,-6763.37629689515,-2426.97753186201,-2120.12749315527,-235.597257029401,-2330.75888800336,1150.73039487327,1494.91055366659,42.4100324422313,299.650615419505,4.80664748763303;-2649.72298459326,8678.70025284487,9065.78286840561,-12092.2670134130,-21520.1471267947,-10252.7901468981,5174.18671939095,20707.7525356305,17907.9614347750,4750.15476074212,4002.11815278469,-9494.72644351127,-8627.77377775600,-6086.68196376505,-833.422218032105,-2873.23744407173,586.631955972795,2446.04873244906,947.176897720226,736.889969858953,43.5366728071199;1122.41723910288,-5988.56815808036,-1809.00479991374,10140.0476083527,7305.61225541493,606.360082097489,-6213.85836215030,-6385.52536984674,-2149.58593568100,91.4063286132576,573.764084734156,1548.26797657929,2025.67297031242,-57.2807108797317,-16.7539518111955,450.127471640802,-390.257058805808,109.161673656376,-306.491220097604,64.5362678391659,-1.82954795277311;430.742293325696,-1684.29566424883,213.613028031744,-201.854698973771,357.239954208322,-1543.49678250939,1583.65556280476,2888.75615642618,2334.73233271210,1038.35981643680,2638.38779849557,-4692.52535050249,-646.835263471459,-1390.79860601829,-170.746294955545,-2649.60748178555,1409.00738100372,671.778597606783,-9.08903307712891,213.036885598204,4.36686221683885;-2126.29187896814,7110.38827664636,7397.46170800853,-11636.9893589491,-17483.6538357485,-8610.58245105270,7789.19832020541,17901.3041964922,14984.6449260971,4083.63015617243,1559.39442348296,-10208.5725888863,-6939.33986263497,-5208.65913988977,-728.549371213672,-2512.71719521247,1955.07835727740,1775.53693140095,846.878262084530,630.164826145627,38.1145955949757;1375.95414095812,-6948.09664685744,-2288.06468674180,11357.2414298201,8601.96217637854,960.808259400323,-6278.08988808793,-7805.54211473394,-2874.00902072831,-17.5337807628452,-479.142143252587,2346.96772370854,2327.05160386491,167.363106780783,-12.4955088205985,1030.61919076993,-476.317937902171,-47.3618761451948,-301.186365934912,34.5784215768099,-0.248951999222623;1222.76007864284,-4523.60425687511,-1589.88826880975,3033.53400174953,5402.06744826608,-69.4763710329952,1524.90922015092,-2157.66674324688,-772.032999254143,520.109418502048,344.493561566788,-2496.92384792709,1148.76959238682,-549.708181942258,-105.812780993588,-1512.98293379427,1153.58145694801,244.785331914446,-194.706546933685,126.631444088998,3.58481704559690;-868.014987163057,3125.01986467506,3989.59793906519,-7136.74153613820,-9082.83472251137,-5426.21725643481,5950.78369239894,10915.6619484295,8941.94695876262,2796.05551997335,1142.98996801268,-7658.23601694076,-3877.61792460659,-3380.90216783520,-516.267470124017,-2068.31018423174,1621.24860834103,1232.26500248737,432.513228092519,430.255930242376,27.9367522844847;1480.64612566302,-7155.92996897568,-2432.87043133006,11298.0580085088,8740.79245563480,1077.22612826689,-5787.48071361009,-7779.13702145425,-3042.51427333378,-63.5850310956789,-1038.81927445051,2416.07493125454,2246.24284357444,260.470662569169,-9.96441233104643,1244.56568889640,-524.321093173687,-46.4188839467069,-280.796411419097,19.0491026879630,0.397526965251229;1773.25825159222,-6285.29969448234,-2694.37379745498,4857.20974457886,8273.68515641470,780.335430861478,1141.35026297252,-4649.05394152644,-2570.30006139290,231.144979749588,-85.5022415741025,-1625.84434653699,2062.12523603727,-49.1387621412311,-72.8785661507543,-1339.03426678685,1103.34436072544,65.0637276860654,-293.142981242104,73.6744206968868,3.72854987505576;573.043217634063,-1374.46320484494,515.878868421782,-1825.65516883720,-679.069143900357,-2392.79621442063,3128.64379811236,3893.33851540704,3306.95998563821,1614.30028293509,1381.59072633187,-4867.85674849687,-1073.19032695617,-1763.60357515200,-322.925647491968,-1769.26173215003,1100.17760037577,777.042608894183,60.4168761959532,261.914360371457,18.2775128040826];
PPnn=[0.381304499832674,-0.0101404716463117,-0.229322178073045,-1.74840882436544,0.494503766538800,0.420995785566350,2.34571227354516,-0.0771182021042934,-1.13645477615320,-0.167266741180917,-0.829748337795765,-0.246844735087650,0.493185617291757,0.708269764414119,-0.0671304273526758,-0.0684183414665595,0.255255981637249,-0.247953393363711,-0.0768789955886299,-0.131181930999002,0.0295313334542376;0.519923984002126,-0.585401847585842,-0.412035573340412,0.380001097969787,1.86281003744237,0.589245467522921,-0.585190486718689,-2.88628608607720,-2.22647927070935,-0.133626896299191,0.371109079539908,2.19008693010763,1.63590058622370,1.04463462603768,-0.156297925439947,-0.00476880658844240,-0.517395558205520,-0.613587472782594,-0.242014637604002,-0.159748130160980,0.0523843720077865;0.650614929107504,-0.897710622109389,-0.551994786539512,1.03323264681931,2.75309452138536,0.666785335941744,-0.941309830707473,-4.12834051999018,-2.94674722064519,-0.00759923737506946,0.272918941949670,2.76759213254956,2.22309986328584,1.24793929596110,-0.288476753016390,0.0548403508330492,-0.518596330077162,-0.790864531358890,-0.312094365822099,-0.172643773327992,0.0824849415230126;0.347667495882322,0.289234933803286,-0.220055335386248,-2.93536087446422,-0.0974381272305469,0.553067369015117,4.18030467750475,1.20080383230064,-0.804617411679374,-0.389237225166980,-2.04938785535240,-1.27488718082909,0.0222998822320211,0.643444190801609,0.0593053218151839,0.218329461766328,0.540089634253270,-0.0637303214508796,-0.0284529236642235,-0.128285978159261,0.00583679532407909;0.522125551480372,-0.515816216967532,-0.596972647931964,-0.0211342004153603,1.80443924412455,1.08481434560269,-0.0301047428300762,-2.33654956302506,-2.51478372241944,-0.651002521289251,0.0280424563668986,1.75196027725312,1.51707730107346,1.28655554465025,0.0789810309495608,0.0838262474735771,-0.426102277600237,-0.511680768911923,-0.266032508276431,-0.209405661392468,0.0137422932198168;0.713044338659243,-1.09428775230044,-1.05120626818417,1.01147743115830,3.78920531184363,1.71666995903140,-0.507894635913154,-4.94340593758812,-4.40590538031847,-0.963482459146016,-0.163122522759629,2.94840953185831,2.98622772762067,1.98719929148821,0.106905200064674,0.171565796930049,-0.462305384099405,-0.920888521114223,-0.492783471118182,-0.297992935860639,0.0218785739181499;0.291439219997079,0.630111051254260,-0.0440736762284457,-3.88966413709321,-1.01653510024683,0.398082208580164,5.43612742971616,2.57144319008823,-0.0779113033254835,-0.377677768384090,-2.82553065211489,-2.12702804562835,-0.609479054502096,0.403545876197091,0.0920037118478617,0.397563976554669,0.728133052448232,0.117982662657273,0.0601116725770293,-0.0985424295751619,-0.00320556284237563;0.484257252845434,-0.0556021591134364,-0.538591454123242,-1.47229655384427,0.793667113872752,1.18172619825606,1.85853715516944,-0.440300958581212,-1.90521418793204,-0.858496896802960,-1.10973891685031,0.465829452572794,0.705051783862847,1.17270171161119,0.194711513310012,0.344839159649415,-0.116550370661056,-0.254038989273143,-0.159854570422528,-0.209262391315284,-0.00676669428795007;0.719829120288282,-0.908103863123428,-1.21843170214908,0.173183177319076,3.62572690773531,2.14184888808436,0.772861521165236,-4.15571501358141,-4.60317291810041,-1.39002465446437,-1.04974066708760,2.26681696913842,2.77740180126635,2.18709396269312,0.292302141581541,0.394729764817486,-0.260984083324117,-0.807094912835389,-0.490095104818532,-0.342056693078951,-0.00707002160407294;0.213799634793931,0.919786263227201,0.229885909134168,-4.40299477870516,-1.89265743357362,0.0737626362228787,5.88672135149810,3.52273116574561,0.706202826447717,-0.235247997511804,-2.98044214224836,-2.59350692060136,-1.08135166266588,0.107159953478253,0.0766179255705496,0.398292513347991,0.802953697763083,0.229319614439556,0.131017727541670,-0.0572316637635396,-0.00532852355773533;0.386169679585595,0.492599004929448,-0.212265069210499,-2.61830107067431,-0.646167320206666,0.842149321423375,2.84155803334940,1.53486924057676,-0.760220566063585,-0.747934374376825,-1.36711589996763,-0.664262368828127,-0.223694906893287,0.794421533430829,0.202942928078111,0.304896365360395,0.112808652113197,-0.00851740397588250,-0.0225595890105502,-0.164288879983322,-0.0134254391365788;0.675692126146987,-0.579630256136485,-1.10348600562719,-0.516273801838901,2.61005895808872,2.13464615334917,1.40290966636903,-2.64628665860643,-3.87196785032606,-1.51777142412303,-1.36334216326278,1.49193167148061,1.97886021413214,2.00953487256361,0.378993094880280,0.466533572633727,-0.133336222161869,-0.588730538382711,-0.372493060612428,-0.332269776039890,-0.0233834989041335;0.132000672702167,1.19763560049669,0.512872682569703,-4.86924773806073,-2.61266361035277,-0.272227571939646,6.38320562214918,4.12689801077160,1.35043670683209,-0.0588093723066713,-3.29470124954903,-2.80092797942789,-1.38278414951907,-0.141559788432833,0.0416323302730336,0.483770464083032,0.817493709637039,0.280922620488373,0.177570111015114,-0.0216764051540242,-0.00382564467112764;0.235463004067581,1.14634222265206,0.316575095805849,-3.70930213324897,-2.38383277193370,0.224358929376719,3.71772974819851,3.46155208755212,0.695579308800098,-0.449980372988848,-1.74566846198195,-1.52911037581950,-1.20473323963642,0.286226600915905,0.148811112580733,0.390506105120350,0.229726257391067,0.210269607603952,0.130361500096897,-0.0998389716948905,-0.0119488247112742;0.574953438424009,-0.0496847832695782,-0.764130497425582,-1.30551814847322,1.01054127456141,1.80732765056818,1.84557635413521,-0.747662794206436,-2.49724792295692,-1.43141138223164,-1.47929079849771,0.671440258554976,0.883908988033660,1.54697801565174,0.397722943574776,0.493741959951526,-0.0225285351768670,-0.349602300170280,-0.183720325816838,-0.279767962210461,-0.0314700709645240;0.0307937140972109,1.39692681521607,0.850194491021836,-4.94653486638614,-3.23416304906671,-0.673071710325262,6.32801437730845,4.35472869172386,1.94080624774297,0.140379109287834,-3.26866356559258,-2.72869647690378,-1.51561395937778,-0.382190821466138,0.00275310837560116,0.492031998262144,0.758018572827296,0.286234752169520,0.196314314671561,0.0144231899789687,-0.00205034795955803;-0.0360589533559830,2.07537310397207,1.20140120662988,-4.89445931135764,-4.65663726240596,-0.772830576046373,4.25289870359354,5.42947619215342,2.58832482631439,0.0294020802086899,-1.63668841495420,-2.26224430193785,-2.15571648229723,-0.388106170455521,0.0558463995543746,0.271866875903149,0.326174837250208,0.362810277401930,0.282654195687752,-0.0124015857751278,-0.00752139629698877;0.251787196024309,0.988499985908421,0.374849351514164,-2.11573278031894,-2.16086824700860,0.481691353063617,1.45415675866599,1.85820342994169,0.383964355872981,-0.786407564869792,-0.776161739024589,-0.000148264253402542,-0.719555200367428,0.495383232213698,0.274064980547478,0.276925946585008,-0.0385955021601886,-0.0962912524479360,0.104237619592287,-0.145093532274606,-0.0263218455880479;-0.0129614661081738,1.42955795595965,0.973190236908515,-4.93986566329813,-3.36511527057167,-0.827396161200738,6.47872024877306,4.30012182600214,2.08230374148718,0.223515807911377,-3.53664351697701,-2.65533753384629,-1.47841548683345,-0.454222500992926,-0.0151558346876293,0.613517108919072,0.722260810629498,0.286367380267565,0.183566935644170,0.0277914100707059,-0.000981076851234039;-0.327766405027857,3.10741296423688,2.05311577439238,-6.68053690702603,-6.73992151782382,-1.68267481707292,6.08078594649479,7.43154364653360,4.09900473707400,0.460666828553197,-2.65783462788015,-3.24212505923581,-2.90449606981900,-0.884398509688451,-0.0312194019534175,0.510123101377981,0.499970177003706,0.537931314660195,0.367918829463240,0.0511256473266572,-0.00225516928949988;-0.351565592290507,3.00848193946727,2.28925415930787,-5.09434762807049,-6.74856130351644,-1.64899635308920,3.86957264209447,5.91639666576267,3.97499460591644,0.257478054366193,-1.80483572321264,-1.69312037558390,-2.50849528006069,-0.723013616064575,0.0543429874376976,0.450885026330164,0.212236985174521,0.257283326385139,0.350577316430374,0.0100458518298586,-0.0119653529197623;0.0319112306851712,1.01565615938434,0.870751825819034,-3.86021300791413,-2.64127502673021,-0.782375392769920,5.12279985578943,3.10236988049582,1.70868869179209,0.231997700569212,-2.63127793180267,-1.94303188934242,-1.03066889251519,-0.394095762050879,-0.0228351408424853,0.355368708006201,0.574991565992882,0.163606710311695,0.131607716644317,0.0274869738206685,3.94327113026914e-05;-0.499860375699185,3.30756669029673,2.46910314800565,-6.08442118537319,-7.01872941886605,-2.09359128669866,4.48908800499076,6.78525929148419,4.38677364827507,0.656705150479979,-1.20956295599662,-2.64476490305833,-2.62098730088985,-1.03084852228314,-0.0748311126407095,0.0353873236120537,0.375447833994400,0.395273643012246,0.343007222451409,0.0752265293269558,0.00124670750122959;-0.913571919403410,4.09252054321521,3.86757548159211,-4.91285901922828,-9.33905373219112,-3.26182347363393,2.04008521381352,6.62630074484934,6.17106668046770,1.01516552080703,-0.223941443197316,-1.29086722853248,-3.03784442323075,-1.51085862360847,-0.108548752357752,0.00807738752762234,0.0474113125791316,0.217651543183715,0.462065303215198,0.110866201028214,0.000526353566545776;0.109473919778766,0.591130870519589,0.704784749619986,-3.12396153547505,-2.07005999522314,-0.679631472407998,4.68386027482224,2.46293835656035,1.40589804865957,0.212617192519161,-2.69681916574330,-1.61981287522305,-0.822630914342416,-0.330562029627609,-0.0238953663256367,0.468713971679053,0.488566406377254,0.140604553492570,0.101389922658355,0.0241590736458368,0.000470677199502364;-0.609486409864798,3.69319620293610,2.70126335065940,-6.99732042087743,-7.59756554090339,-2.31880747810914,5.83359439058588,7.53122761298855,4.67751683090733,0.768851664456474,-2.20044300063868,-3.14940290411145,-2.79662237305656,-1.10776427113384,-0.101063201920669,0.316071191951204,0.482714401302853,0.478530468521415,0.342643881479089,0.0861696062425659,0.00342288128286119;-1.69647665431504,6.59799510951574,5.85874685284573,-8.49819429442895,-13.9659111032232,-5.13167669593126,4.95249688164808,10.7964453088538,9.13986649045467,1.83490857721803,-1.56247418305647,-3.04644920134676,-4.59652528010776,-2.34189620177121,-0.275144382342242,0.291071756279700,0.293588271227921,0.550533047852029,0.635760798526157,0.200489624398191,0.0127345441676579;0.248446174272843,-0.0445436340285805,0.412304122917116,-2.00503990234877,-1.12701846368000,-0.480923330422037,3.68404985914554,1.42544709649090,0.911700624624901,0.158462359673804,-2.23001132983841,-1.13127550115580,-0.478016560466442,-0.226795145502015,-0.0189354038774791,0.378761688258683,0.391385780106753,0.0772178242370132,0.0615640158734649,0.0172258701073447,0.000518094512843780;-0.481549617864580,3.17010214444258,2.33027826981246,-6.23982892362706,-6.44136091193318,-2.01591165966111,5.22934803071740,6.40842186334952,3.91432295529764,0.673518944132102,-1.84366957139942,-2.77024012974534,-2.26809920699585,-0.921483796092236,-0.0910528862899985,0.201123260968664,0.442346579866347,0.392796308975751,0.267462695839227,0.0724071120041559,0.00350320135263316;-1.91539711405521,7.20448135845793,6.17960777731874,-9.31705758906540,-14.4768135183195,-5.34514877972017,5.59267582719245,11.2102674986261,9.23804156110298,1.92425298511099,-1.79108053360812,-3.32832037620686,-4.54548351383599,-2.34625714130691,-0.297366327098001,0.308330044130994,0.359673599704730,0.567407709289498,0.602694241515391,0.203248010270041,0.0150273614677927;0.414904685795766,-0.724431907566888,0.105469860247436,-0.958484814284984,-0.177925792179374,-0.284838860223126,2.86473049180321,0.437139035535821,0.450395334384017,0.105201804295471,-1.85688057248344,-0.718446731074842,-0.165441027391388,-0.135078626629214,-0.0133985646444380,0.291788859083787,0.328493529671727,0.0192077181847873,0.0288062423726638,0.0111117905374320,0.000434523055171533;-0.244612335550800,2.29783445223889,1.76837314194834,-5.07130117799012,-4.81425147046176,-1.57667906251460,4.45866027147264,4.84931429149924,2.94116342383788,0.527761636993009,-1.53278442081624,-2.21279752804811,-1.63222801899469,-0.692634521128275,-0.0713534993981344,0.128554986978321,0.379031299096298,0.282758174489634,0.187184965530875,0.0546518840453008,0.00281950227651079;-1.78634368917685,6.72111151425319,5.65909373697139,-8.72287884592815,-13.0047723090624,-4.82203344278858,5.21123816555212,9.93501588790213,8.10240641779005,1.71428394631352,-1.57620587514798,-2.97605757754106,-3.85108812391876,-2.02491000403564,-0.262797725986698,0.233022982721600,0.335998942762499,0.471501606856071,0.493570222300384,0.174076644499006,0.0133355094727697];
FFAA=[-315.272704188489,6710.13846396638,942.423445727995,-38259.2854486081,-10265.6764908712,-805.744708133855,90204.0357377791,29409.6000145685,6671.35286156466,116.828651059316,-93607.8814212022,-32994.2345132746,-8034.23739322659,-1385.44880733224,112.627260061400,35344.4672861712,12860.4433891027,2354.17875929543,917.139696440988,94.7744001546872,-32.4933980470166;-510.215513666608,7627.32305131947,1743.51495086464,-33498.8941917896,-13227.7943139061,-1907.10084259380,65589.3411152501,25246.7898579598,9170.85071548304,915.729779041219,-60401.0450034484,-13073.0941266853,-10217.6426348036,-1991.36994681071,-200.219638826184,21284.7713360873,-1149.82868555667,3556.95249889584,753.294639762386,239.991221078621,17.1827500029542;-528.579313651575,6358.01942759012,1948.69909856843,-22657.3633116167,-12213.4727974330,-2388.13027512531,34689.2285866889,22244.6838138150,8173.14613492596,1434.43648748726,-24407.0878955339,-12218.4523501922,-7917.73262457434,-1929.78377228611,-449.940736919386,6600.14188115696,-188.360382678968,2842.47947027857,202.366307580399,370.726934440736,60.7506143786136;-358.560961959043,6668.40677472658,1268.51916912422,-38521.3085362489,-11384.6517727397,-1298.02488676749,93731.7690152986,30572.7554196571,8122.39003231884,371.559023686716,-100136.316786933,-33263.8648446327,-9224.01041678419,-1883.29548521516,66.5220245810685,38723.1891322673,12680.2417422788,2707.81247722275,1093.00857269623,143.290704486129,-30.8046206330538;-775.034316251451,9764.64023860920,2733.69628332105,-38325.5038685044,-19763.4531065082,-2848.09348390070,69303.8790082431,36882.8492795546,14031.7252750896,1083.12079282669,-60523.3883169420,-20144.7538126242,-15994.6012629767,-3176.72852490111,-82.9181073029952,20659.5581506271,-328.497636216626,5796.35392220765,1363.54513641755,315.934798834505,-20.0310273569161;-996.300547574342,10560.6775695913,3680.46841266620,-34196.7805329771,-23090.5396960161,-4202.21536440217,48351.5149690379,41832.9595672542,16037.1633253274,2046.28965729198,-31589.6619221414,-25242.0908292690,-17125.5546118999,-3851.63053507743,-428.292679629538,7928.96401188338,2343.41049532947,6230.18521026148,1238.05283326933,485.957494672431,29.9413255595859;-330.235820859904,5312.55506859435,1447.04204408218,-32803.3685761706,-10444.9183999703,-1770.81964246810,85027.0488721052,26723.7524979636,8451.87895835414,733.363136097641,-94903.6426243922,-28833.9985979559,-8898.67766894645,-2159.26895272064,-50.5429576515038,37819.1694658586,10956.4791111823,2508.70385067322,1097.71041482189,189.934733353423,-16.7411388175513;-1024.68433467284,10632.7150444818,3807.13832118434,-37472.1232754916,-24051.3341364270,-4207.87601593830,63224.4464390494,42115.2151007530,17872.4476468559,1769.76663670997,-53052.4426743233,-21630.7516660955,-19529.5656946577,-4375.03762066119,-213.641145203068,17795.9452087483,-889.322718661312,6896.25825043769,1856.57114422448,435.155333491112,-15.9136588412036;-1548.64697875074,14130.2916069548,5806.83461344740,-41298.8005370851,-32929.6656699466,-6772.76544778604,52169.3790812615,57381.8547859880,23667.8378974363,3311.49284685354,-29018.6872367369,-35451.1744041893,-24272.6496809222,-6147.13235306523,-659.602034774670,5615.47667706174,4710.58181547108,8412.40539957231,2204.40451921042,711.176580564496,35.1217547009608;-241.784203477794,4128.00170803738,1354.77200531192,-30851.0676575635,-8440.36990879229,-1874.13354223921,88166.4009350172,21271.6513275158,7966.70625817647,849.378042211734,-103460.658398964,-23480.2826110116,-7831.74466059165,-2170.11786372753,-85.1788593123107,42399.2429939566,9150.90856932225,1990.46843001972,1047.64114273255,195.921860629495,-12.9712185938702;-1215.45153683679,11736.9201853547,4528.59377237780,-42569.0015475247,-25803.6119928689,-5169.59076710411,76545.4066815883,42399.3915852294,19949.8573661408,2295.31285931311,-68242.9803088031,-19926.5973798130,-20728.2931146611,-5092.92246772819,-342.251360298173,23839.6276852223,-1759.33394310660,6823.94797101893,2203.48972617673,484.205459575789,-2.26913600583485;-1998.34647506413,16397.3588464179,7281.65962918274,-43692.6865585861,-39190.4692927652,-8193.20408708974,48771.8839569979,65276.6910709043,28578.1440316906,3680.31974854330,-21378.4835692083,-38998.0459350185,-28396.6714312483,-7545.38584334261,-574.097223183343,1951.74268481740,5023.19067755059,9435.76070857483,2838.01899972113,808.585525662375,-0.0515677300507597;14.2284610420970,1739.36659668569,701.813194593606,-23444.1528141950,-4740.67711527545,-1357.33408987240,77817.0119886413,14556.9018165043,5830.98832727688,733.270746425202,-96765.3054711320,-18451.5380467067,-5727.05130071264,-1605.66714466501,-116.136780132114,40763.7097701045,7916.02331562526,1245.38749608363,831.584582687598,136.819974609203,-1.17660190867249;-1165.64514079783,10458.1082075517,4411.15145296387,-37016.3066419099,-24008.0106186648,-5111.44047672030,66519.3854890098,38033.2565595875,18926.0684845447,2301.95035860385,-59921.0724573215,-15859.4522888882,-19363.5150789640,-4845.31413408857,-351.448354524831,21223.6503721313,-3168.86185025850,6431.12175825254,1984.40941991661,473.909358309407,-1.42282923960825;-2540.91218031886,18741.1697013327,9101.61932944836,-48261.5427962064,-44062.9494029570,-10339.5375156299,54855.6514936801,68711.6870045496,32623.7925221260,4807.92207502617,-26832.7990537076,-37829.9646289086,-31194.9880910513,-8772.15505295877,-845.022623004465,4076.15445313711,3625.73549059179,10017.1191873882,3244.64013999113,934.208716946900,23.6581136728518;499.441364658756,-1825.99759551072,-450.517602421560,-15066.1364402987,1154.02980859170,-513.403984313266,71038.2975093937,4037.42634587686,2683.80340029347,545.751787887354,-97070.3364956627,-9996.85901829766,-2885.18373686405,-837.737751682940,-143.992890710223,42540.7509948332,5409.61892151366,359.812751628026,532.844663128106,67.3268697422936,10.2484256236353;-970.120516710900,8549.44662117827,3854.72497124282,-32269.9459864872,-19819.9846590853,-4739.78903006175,61876.3225774857,30328.7097207449,16208.6090617467,2305.79322302375,-58157.5363570570,-10260.3931336933,-16456.0132213504,-4143.01076032273,-423.402721288625,21041.3177468500,-4541.92186374925,5522.01653762594,1613.43309890713,413.111344409863,15.3885550872592;-2977.82794408447,20932.2840039819,9857.09148866797,-53147.0189080705,-45515.5177168107,-10656.1664180693,59499.7416531773,69071.9378726337,32652.3378007966,4693.15147865743,-27435.7703502697,-37448.1358239391,-30394.5194036286,-8601.41264327027,-743.737733722449,3136.39105183280,3612.34821572562,9572.46012728881,3084.94058981372,897.117386371293,7.23510916360309;998.196064322625,-5230.91770548925,-1549.41445788374,-6195.87874466957,5640.37120029053,344.613792502402,60904.2235418558,-3162.12336120603,416.874822556051,272.730076182660,-92746.0456502515,-4205.96208387788,-1325.84767596763,-246.528372911311,-122.825937928369,42376.3797257624,3583.72180419921,-57.7254269263980,383.237780392762,4.04146534912494,13.3667387254183;-226.831645054645,5993.72624123831,1610.09756808928,-31947.1687217263,-13157.3738388735,-2629.26432469224,70671.3074980097,23912.8944706601,11510.1764123886,1528.11470280692,-70304.4418358073,-8572.55988638352,-13546.4624917421,-2711.97902971447,-345.227595916740,25823.8903513164,-3857.72380787097,4584.89591757677,1362.94820838612,229.469127495819,23.4765939543951;-3304.43691661563,21951.9916770771,10839.6553358910,-56251.0628411950,-46981.5319417512,-12092.7366496783,67036.7330147018,69548.6955744638,34095.9748032326,5774.94387398082,-35796.6650466724,-37028.9880068745,-31265.0180056852,-8983.03149106669,-1151.17123806948,6271.64202593385,3862.00095065354,9184.19644913342,3454.54368074092,884.294338146678,67.8501949799069;1501.93715174573,-7604.66280366255,-2685.04637531848,-2699.61026359844,9847.14439422798,1297.82937617288,60352.6056415309,-9360.76283918622,-2011.97071808598,-108.538533348386,-95152.3413723940,-108.236289283036,596.359348037881,333.818728514564,-49.9847495166074,43683.4476306983,2687.43995217102,-512.441667234041,134.845072700307,-38.1748846577108,8.05652610582382;462.509576738160,2357.93347537255,-160.826024226260,-24979.1688271379,-5587.07477845907,-987.199192616057,65155.5201308074,11815.4204757041,6575.86540676625,800.229091374913,-69078.1124629052,71.5378223790295,-9121.79437650780,-1454.92757599129,-186.648377916729,26072.6676683150,-6176.82779722100,3493.80356545972,734.806839520157,135.781404692690,9.84040360040275;-2815.62883322243,19544.6231895253,8743.73359015030,-54146.6674258038,-36956.6590493960,-9523.23678096191,70266.8281742548,53863.5376646897,25954.4188854796,4393.28204799035,-41286.3150063396,-27013.9450723702,-23496.6540622257,-6614.89552775565,-809.176486401620,8327.36580509244,1599.45850323286,7090.04527708269,2291.57371636981,671.460151974687,36.4683714921628;1929.59275363340,-10677.8612649930,-3419.61484859724,6430.54294182689,12889.2021284656,1794.78789268682,47440.6060456751,-14742.6848761369,-3131.65589136066,-265.572011756866,-86751.9390217065,4406.59971920402,1460.99203405839,555.283649680468,-31.2016975824391,41702.5546286652,1329.91352071806,-854.827899524768,113.707484630065,-63.5436513923784,8.16712767083383;1547.99674933704,-1669.04507297805,-2677.53626448614,-21608.5080068648,1863.18229732002,987.080168254956,69544.7240626299,4711.07271338503,2422.83839774955,142.903949987523,-77010.0114392357,1176.33088335617,-6394.96303494901,-436.669758618057,-110.463375093703,29132.9445784552,-4905.60979476421,2698.37833729402,503.910859283115,32.1689966942251,11.3159912925117;-974.300971853110,13248.4089781254,3670.68891020549,-43358.2384991719,-24896.1605999251,-4886.49580082430,56200.8293301695,44345.1676288494,17555.0422322344,2663.19280408587,-28952.7291434354,-24279.5113257639,-19571.7594554487,-4075.99294502339,-594.321487640807,3613.73971329715,1911.03375778617,6190.49120378729,1894.50829324937,367.490361185592,41.4039825673017;2220.63490498803,-12548.2884979995,-3873.26919481649,11508.8548644237,14731.3706805291,2130.09693196923,40805.7603694764,-18228.2132319913,-3852.28377260190,-413.360417792026,-82870.3882354031,7764.35009102899,1958.11558125938,698.511118361245,4.79740251570004,40970.0938481470,5.88987252700749,-842.609699770702,21.4259827816459,-67.7751995282489,4.48850901429499;2893.96033848708,-8796.65845292314,-5408.29914120548,-5063.85533141185,11667.4641305955,3059.15275154825,50383.3042044146,-10383.9125438181,-2408.03236531591,-581.964495559781,-66729.1848646281,12557.4527517683,-2454.14670924028,592.289575978042,-0.158447515885499,27231.2154097116,-8156.81622932580,1412.03468576946,205.636725900328,-58.3975418524226,6.55194811441919;1210.31845254928,5769.82607736099,-1745.35492975700,-33057.7102038946,-10438.6790254847,-144.314337120676,49684.9862500922,29165.8133449506,8349.47317587836,803.062598295472,-27640.1321815335,-16641.3099320363,-13751.5768693162,-1627.37383972717,-278.669965124497,3767.36173250889,553.124159036507,4759.27222559491,1233.30978402563,124.567448351318,25.5757458851710;2384.36436786715,-13916.7648450011,-3963.63286809710,15929.2125731934,15711.6977213840,2114.25332004155,33515.3674913202,-20741.9064663885,-4122.08229243988,-402.429061239134,-76639.6938591882,10056.7186401019,2411.58641055615,704.429122686734,6.15356754041690,38788.9212410565,-618.148664388650,-1006.12655105983,-17.8501556217286,-61.6588779647348,3.83046037785706;3683.15901108353,-10715.4284433110,-6924.64180074635,-6763.35890218361,15666.1069345511,4160.57379427987,59826.7564984489,-13023.6658927618,-4921.22698213537,-951.896071896789,-76714.8032177411,11563.6954954049,-884.238961558263,1195.52114627312,54.5428525146925,30566.3416363400,-6866.96528240756,1107.61724810554,14.9805753131212,-108.116588457335,4.04973718671934;3384.41947913008,-2682.58221674400,-6387.41855241716,-18368.5072843631,3138.88994747426,3497.17702053188,36138.8666397717,12403.3336234616,800.131863809579,-514.362122464578,-21542.3380307133,-6198.55112405402,-8375.78705611242,151.118653041649,-65.1746526088890,2771.34625572421,-1972.72409170415,3271.14322468923,698.854057840200,-33.1532296516727,14.5048236487713];

%% Motor main dimension
clear TMV turnnumber Ippmax wireD Dostator  eta zz z Dshaft Tav Tripple Iin HH hsoverg Rseries TMM

%%Dor=150e-3;   %rotor outer diameter
Ns=18;   %number of stator poles
Nr=12;   % number of rotor poles
Ltotalmax=155e-3;  %% maximum allowable axial length
%L=135e-3;   % core length
Dosmax=269e-3;   % maximum allowable stator outer diameter
Dosmin=268.5e-3;    %% minimum desired stator outer diameter
nmn=2000*pi/30;    %rotor nominal speed in mechanical degree
nm=1200*pi/30;    %rotor speed in mechanical degree
V=500;   %supply voltage

% lambdag=90:40:90;
% tslambda=0.4:0.2:0.5;
% trlambda=0.4:0.2:0.5;
% epep=120:10:120;   %%% excitation periods in electrical degrees
% tetaonon=0:20:10;  %%% turning on angle

% lambdag=40;
% tslambda=0.45:0.05:0.45;
% trlambda=0.3:0.05:0.5;

totalremaining=length(lambdag)*length(tslambda)*length(tslambda)*length(epepep)*length(tetaonon);
deltaB=0.01;   %% static calculation precision
h=1/2000;    %% in radians (precision of dynamic calculations)

minhrg=15;   %%%minimun value of hr/g
maxbcr=35;    %%%% maximum reduction in rotor back core width  Wbcr=wbcr-(2*maxbcr/100)*Wbcr

zz=1:totalremaining;
z=1;

q=Ns/gcd(Ns,Nr);   % number of stator phases
deltateta=360/(q*Nr);   %mechanical degree between consective phases torques
deltatetarad=deltateta*pi/180;   %mechanical radians between consective phases torques
deltatetae=(deltateta*360)/(deltateta*q);   %% electrical degree between consective phases torques
deltatetaerad=deltatetae*pi/180;     %%   electrical radians between consective phases torques

epep=(epepep*deltateta*q)/(360);   %%% maximum excitation angle in mechanical degree

% ep=deltateta;   %%%excitation period in mechanical degrees
% %ep=0.5;   %excitation period in per unit
% %AAe=45;     %advanced angle
% %%AAe=(AA*360)/(deltateta*q);  %% electrical AA
% % tetaon=45-AAe;  %% Teta on in degree
% % tetaon=tetaon*pi/180;  %% Teta on in radians
%tetaon=0;       %% Teta on in electrical degrees
tetaonon=tetaonon*pi/180;  %% Teta on in radians


mu=4*pi*(1e-7);
ro=7650; %% Steel Mass density in Kg/m3
rocu=8960;  %%% mass density of copper in kg/m3
ro20=1.68e-8;  %%% copper special resistivity at 20C
ro80=2.069e-8;  %%% copper special resistivity at 80C

Bc=[1.16 1.28 1.3 1.34 1.36 1.38 1.41 1.42 1.43 1.49 1.54 1.58 1.6 1.65 1.69 1.72 1.79 1.85 1.88 1.9 1.93 1.97 2 2.02 2.05 2.08 2.1 2.11 2.125 2.15 2.19 2.2 2.21 2.23 2.26 2.3];
Hc=[300 400 500 600 700 900 1000 1200 1500 2500 3500 4000 5300 7300 8900 10000 16000 20000 26000 30000 40000 50000 60000 75000 100000 125000 130000 150000 160000 180000 200000 220000 230000 250000 270000 350000];

HH= polyfit(Bc,Hc,11);


alpha=2.215*pi/180;    %tapering angle
Bstmax=1.7;  %% Maximum allowable flux density in stator tooth
Jmax=6.5e6;  %% maximum allowable current density
kf=0.5;   %%% fill factor


n=(nm*360)/(deltateta*q);    % rotor speed in electrical degree

pp=Ns/(2*q);

% for u=1:length(tslambda)
%   for uu=1:length(trlambda)
%     for uuu=1:length(lambdag)
%         for yy=1:length(epep)
%             for kk=1:length(tetaonon)

clc
clear phi MMFOUT phii phiii MMF1 MMF2 MMFtotal T FL teta DT Di1 Di2 Di3 Dxn1 Dxn2 Dxn4 tetatotal flux fluxsp1 fluxsp2 fluxsp3 fluxsp4 fluxrp1 fluxrp2 fluxrp3 f Psp1 Psbc1 Prp1 Prbc1
clear FDsp1 FDrp1 FDsbc1 FDrbc1 Itr I Iphase Inew Tnew Itrnew B tss Bsbtt Hsbt MMFsbt Brbt Hrbt MMFrbt Bsbc Hsbc MMFsbc Brbc Hrbc MMFrbc MMFOUT BA BB tnA tnB
clear MMFAA1 MMFBB1 MMFAA2 MMFBB2 MMFAA MMFBB PnAA1 PnAA2 PnBB1 PnBB2 FAA1 FBB1 FAA2 FBB2 F Pn P MMF1 MMF2 MMFtotal T Itr I FL Iphase intrain1 outtrain4 outtrain5
clear Di1 DFL teta x tetatotal Dia DTa Dib DTb Dic DTc Did DTd Die DTe Ditotal DTtotal flux fluxsp1 fluxsp2 fluxsp3 fluxsp4 fluxrp1 fluxrp2 fluxrp3 fluxsbc1 fluxsbc2
clear fluxsbc3 fluxsbc4 fluxrbc1 fluxrbc2 fluxrbc3 Y P2 Psp1 Psbc1 Prp1 Prbc1 fsp1 fsbc1 frp1 frbc1 Bsp1 Bsbc1 Brp1 Brbc1 kesp1 kexsp1 Phsp1 Pesp1 Pexsp1
clear kerp1 kexrp1 Phrp1 Perp1 Pexrp1 kesbc1 kexsbc1 Phsbc1 Pesbc1 Pexsbc1 kerbc1 kexrbc1 Phrbc1 Perbc1 Pexrbc1 TRM
totalremaining=totalremaining-1;  
iterations=iterations

ks=tslambda;
%kr=trlambda;
kr=tslambda;
kg=lambdag;
ep=epep;
tetaon=tetaonon;

lambdar=pi*Dor/Nr;    %rotor tooth pitch
ts=ks*lambdar;     % stator tooth width
tr=kr*lambdar;    %rotor tooth width
g=lambdar/kg;   %air gap length


%%% determination of end winding length
slotW=((pi*(Dor+2*g))/Ns)-ts;    %%% slot width at the bore
L=Ltotalmax-2*((slotW)/2)-0.002;     %%% 1mm in each side

% if Ltotal>Lmax
%     pf3=100*(Ltotal-Lmax);
% else
%     pf3=0;
% end



hr=40*g;    %rotor pole depth
Wbcr=1.1*ts/2;    %Rotor back-core width
Wbcs=1.25*ts/2;   %Stator back-core width
Ds=Dor-2*(hr+Wbcr);    % motor shaft diameter

if Ds<=0
    pf2=1.1;
else if Ds<(0.2*Dor)
 %   pf2=100*(0.2*Dor-Ds);
    pf2=1-exp(1-(0.2*Dor/Ds));
else pf2=0;
end
end


% if Ds<(0.2*Dor)
% for hrr=24:(-1):minhrg
%     hr=hrr*g;
%     Ds=Dor-2*(hr+Wbcr);
%     if Ds>(0.2*Dor)
%         break
%     end
% end
% ww=Wbcr/50;
% for lk=1:maxbcr
% if Ds>(0.2*Dor)
%         break
%     end
% Wbcr=Wbcr-ww;
% Ds=Dor-2*(hr+Wbcr);
% end
% end


Dshaft(z)=Ds;


N=round((1*V*deltatetarad)/(2*pp*Bstmax*L*ts*nmn));     %%% Turns per pole
turnnumber(z)=N;   %%% Turns per pole


Ipercent=1:-0.01:0.05;
for mm=1:length(Ipercent)
for nn=50:110
hs=nn*g;           %stator pole depth
Dos=Dor+2*g+2*hs+2*Wbcs;     % stator outer diameter
    
lbcs=q*pi*(Dos-Wbcs)/Ns;
lbcr=q*pi*(Dor-2*hr-Wbcr)/Ns;

tsb=ts+2*hs*tan(alpha);   %% tooth width at tooth end
tsmean=(ts+tsb)/2;   %% mean tooth width
Ats=Ns*tsmean*hs;    %%% All stator teeth area
ATandS=pi*(((Dor+2*g+2*hs)^2)-((Dor+2*g)^2))/4;  %% All teeth and slot area
Ass=ATandS-Ats;      %%All stator slots area
Aslot=Ass/Ns;   %% one slot area

phimax=Bstmax*L*ts;
Hstmax=HH(1)*Bstmax^11+HH(2)*Bstmax^10+HH(3)*Bstmax^9+HH(4)*Bstmax^8+HH(5)*Bstmax^7+HH(6)*Bstmax^6+HH(7)*Bstmax^5+HH(8)*Bstmax^4+HH(9)*Bstmax^3+HH(10)*Bstmax^2+HH(11)*Bstmax+HH(12);
MMFstmax=Hstmax*hs;
Brtmax=phimax/(L*tr);
if Brtmax<=1.06
        Hrtmax=200*Brtmax/1.06;
    else if Brtmax<=1.28
            Hrtmax=200+(200/0.22)*(Brtmax-1.06);
        else if Brtmax<=2.3
    Hrtmax=HH(1)*Brtmax^11+HH(2)*Brtmax^10+HH(3)*Brtmax^9+HH(4)*Brtmax^8+HH(5)*Brtmax^7+HH(6)*Brtmax^6+HH(7)*Brtmax^5+HH(8)*Brtmax^4+HH(9)*Brtmax^3+HH(10)*Brtmax^2+HH(11)*Brtmax+HH(12);
            else
                Hrtmax=1.8e5+(Brtmax-2.15)*((1.695e5)/0.15);
            end
            end
    end
MMFrtmax=Hrtmax*hr;
Bsbcmax=phimax/(2*L*Wbcs);
if Bsbcmax<=1.06
        Hsbcmax=200*Bsbcmax/1.06;
    else if Bsbcmax<=1.28
            Hsbcmax=200+(200/0.22)*(Bsbcmax-1.06);
        else if Bsbcmax<=2.3
    Hsbcmax=HH(1)*Bsbcmax^11+HH(2)*Bsbcmax^10+HH(3)*Bsbcmax^9+HH(4)*Bsbcmax^8+HH(5)*Bsbcmax^7+HH(6)*Bsbcmax^6+HH(7)*Bsbcmax^5+HH(8)*Bsbcmax^4+HH(9)*Bsbcmax^3+HH(10)*Bsbcmax^2+HH(11)*Bsbcmax+HH(12);
            else
                Hsbcmax=1.8e5+(Bsbcmax-2.15)*((1.695e5)/0.15);
            end
            end
    end
MMFsbcmax=Hsbcmax*lbcs;
    Brbcmax=phimax/(2*L*Wbcr);
    if Brbcmax<=1.06
        Hrbcmax=200*Brbcmax/1.06;
    else if Brbcmax<=1.28
            Hrbcmax=200+(200/0.22)*(Brbcmax-1.06);
        else if Brbcmax<=2.3
    Hrbcmax=HH(1)*Brbcmax^11+HH(2)*Brbcmax^10+HH(3)*Brbcmax^9+HH(4)*Brbcmax^8+HH(5)*Brbcmax^7+HH(6)*Brbcmax^6+HH(7)*Brbcmax^5+HH(8)*Brbcmax^4+HH(9)*Brbcmax^3+HH(10)*Brbcmax^2+HH(11)*Brbcmax+HH(12);
        else
                Hrbcmax=1.8e5+(Brbcmax-2.15)*((1.695e5)/0.15);
            end
        end
    end
MMFrbcmax=Hrbcmax*lbcr;
Bgmax=(2*phimax)/(L*(ts+tr));    %%% 1.05 due to fringing flux effect
Hgmax=Bgmax/mu;
MMFgmax=Hgmax*g;
MMFmax=2*MMFstmax+2*MMFrtmax+MMFsbcmax+MMFrbcmax+2*MMFgmax;
Ipmax=Ipercent(mm)*MMFmax/(2*N);   %%% maximum allowable current
Awire=Ipmax/Jmax;   %% wire area
Dw=sqrt(4*Awire/pi);  %% wire diameter
Aslotreq=(N*2*Awire*1.08)/kf;    %% required slot area
if Aslotreq<Aslot
    break
end
    
end
if Aslotreq<Aslot
    break
end
end

hsoverg(z)=nn;
Ippmax(z)=Ipmax;
Dostator(z)=Dos;

%pf=0;
if Dos>Dosmax
 %   pf=100*(Dos-Dosmax);
 pf=1-exp(1-(Dos/Dosmax));
else
    pf=0;
end



pf3=0;
% if Dos<Dosmin
%    % pf3=100*(Dosmin-Dos);
%     pf3=1-exp(1-(Dosmin/Dos));
% else
%     pf3=0;
% end




wireD(z)=Dw;

Idesired=Ipmax*0.9;
Imax=Idesired+0.05*Idesired;   %maximum two series wiindings chopping current
Imin=Idesired-0.05*Idesired;    %minimum two series wiindings chopping current
Imaxphase=(Imax*Ns)/(2*q);  %maximum PHASE chopping current
Iminphase=(Imin*Ns)/(2*q);    %minimum PHASE chopping current

% Imaxphase=3.15;  %maximum PHASE chopping current
% Iminphase=2.85;    %minimum PHASE chopping current
% Imax=(Imaxphase*2*q)/Ns;   %maximum two series wiindings chopping current
% Imin=(Iminphase*2*q)/Ns;    %minimum two series wiindings chopping current

Lw=1.3*(2*L+2*tsmean)*N*2;   %% Wire length in 2 series poles
CuL=Lw*Ns/2;   %%% total copper length
R=ro80*Lw/Awire;    %Resistance of two seried poles (parallel structure for winding of each phase is considered)
%R=5.2;     %Resistance of two seried poles (parallel structure for winding of each phase is considered)

Rseries=R;


%% geometry calculations
if hs>(40*g)
    lsbt=hs-(40*g);
else
    lsbt=0;
end


if hr>(40*g)
    lrbt=hr-(40*g);
else
    lrbt=0;
end


% calculation of normalized parameters
lambdas=pi*(Dor+2*g)/Ns;      %stator tooth pitch

%%%% B-H curve data
% Bc=[0 0.16 0.34 0.4 0.5 0.6 0.64 0.7 0.8 0.9 1.06 1.16 1.28 1.3 1.34 1.36 1.38 1.41 1.42 1.43 1.49 1.54 1.58 1.6 1.65 1.69 1.72 1.79 1.85 1.88 1.9 1.93 1.97 2 2.02 2.05 2.08 2.1 2.11 2.125 2.15 2.19 2.2 2.21 2.23 2.26 2.3];
% Hc=[0 30 65 75 95 115 125 137 160 185 200 300 400 500 600 700 900 1000 1200 1500 2500 3500 4000 5300 7300 8900 10000 16000 20000 26000 30000 40000 50000 60000 75000 100000 125000 130000 150000 160000 180000 200000 220000 230000 250000 270000 350000];




xn=0:0.05:1;
for i=1:length(xn)
    lambdaA(i)=max(lambdas,ts+25*g+(lambdas*(xn(i)/2)));    % stator teeth symmetrical motor
    lambdaB(i)=max(lambdar,tr+25*g+(lambdar*(xn(i)/2)));   %rotor teeth symmetrical motor
    
    tnA(i)=ts/lambdaA(i);
    lambdagA(i)=lambdaA(i)/g;


    tnB(i)=tr/lambdaB(i);
    lambdagB(i)=lambdaB(i)/g;
    
end

%% Operating point calculations
B=0.01:deltaB:2.2;
remaining=length(B);
%B(1)=0.01;
for i=1:length(B)
    clc
    %totalremaining=totalremaining
    remaining=remaining-1
    iterations=iterations
   
    phi(i)=B(i)*L*ts;
    delta=lsbt/10;
    tss(1)=ts+2*tan(alpha)*(40*g+(delta/2));
    Bsbtt(1)=phi(i)/(L*tss(1));
    if Bsbtt(1)<=1.06
        Hsbtt(1)=200*Bsbtt(1)/1.06;
    else if Bsbtt(1)<=1.28
            Hsbtt(1)=200+(200/0.22)*(Bsbtt(1)-1.06);
        else if Bsbtt(1)<=2.3
    Hsbtt(1)=HH(1)*Bsbtt(1)^11+HH(2)*Bsbtt(1)^10+HH(3)*Bsbtt(1)^9+HH(4)*Bsbtt(1)^8+HH(5)*Bsbtt(1)^7+HH(6)*Bsbtt(1)^6+HH(7)*Bsbtt(1)^5+HH(8)*Bsbtt(1)^4+HH(9)*Bsbtt(1)^3+HH(10)*Bsbtt(1)^2+HH(11)*Bsbtt(1)+HH(12);
        else
                Hsbtt(1)=1.8e5+(Bsbtt(1)-2.15)*((1.695e5)/0.15);
            end
            end
    end    
    for kk=2:10
       
       tss(kk)=tss(1)+2*(kk-1)*tan(alpha)*delta;
       Bsbtt(kk)=phi(i)/(L*tss(kk));
       
    if Bsbtt(kk)<=1.06
        Hsbtt(kk)=200*Bsbtt(kk)/1.06;
    else if Bsbtt(kk)<=1.28
            Hsbtt(kk)=200+(200/0.22)*(Bsbtt(kk)-1.06);
        else if Bsbtt(kk)<=2.3
    Hsbtt(kk)=HH(1)*Bsbtt(kk)^11+HH(2)*Bsbtt(kk)^10+HH(3)*Bsbtt(kk)^9+HH(4)*Bsbtt(kk)^8+HH(5)*Bsbtt(kk)^7+HH(6)*Bsbtt(kk)^6+HH(7)*Bsbtt(kk)^5+HH(8)*Bsbtt(kk)^4+HH(9)*Bsbtt(kk)^3+HH(10)*Bsbtt(kk)^2+HH(11)*Bsbtt(kk)+HH(12);
       else
                Hsbtt(kk)=1.8e5+(Bsbtt(kk)-2.15)*((1.695e5)/0.15);
            end
        end
    end    
    end    
    Hsbt(i)=0;
    for kkk=1:10
    Hsbt(i)=Hsbt(i)+Hsbtt(kkk);
    end
    MMFsbt(i)=(Hsbt(i)*lsbt)/10;
    
    Brbt(i)=phi(i)/(L*tr);
    if Brbt(i)<=1.06
        Hrbt(i)=200*Brbt(i)/1.06;
    else if Brbt(i)<=1.28
            Hrbt(i)=200+(200/0.22)*(Brbt(i)-1.06);
        else if Brbt(i)<=2.3
    Hrbt(i)=HH(1)*Brbt(i)^11+HH(2)*Brbt(i)^10+HH(3)*Brbt(i)^9+HH(4)*Brbt(i)^8+HH(5)*Brbt(i)^7+HH(6)*Brbt(i)^6+HH(7)*Brbt(i)^5+HH(8)*Brbt(i)^4+HH(9)*Brbt(i)^3+HH(10)*Brbt(i)^2+HH(11)*Brbt(i)+HH(12);
        else
                Hrbt(i)=1.8e5+(Brbt(i)-2.15)*((1.695e5)/0.15);
            end
        end
    end
    
    MMFrbt(i)=Hrbt(i)*lrbt;
    Bsbc(i)=phi(i)/(2*L*Wbcs);
    if Bsbc(i)<=1.06
        Hsbc(i)=200*Bsbc(i)/1.06;
    else if Bsbc(i)<=1.28
            Hsbc(i)=200+(200/0.22)*(Bsbc(i)-1.06);
        else if Bsbc(i)<=2.3
    Hsbc(i)=HH(1)*Bsbc(i)^11+HH(2)*Bsbc(i)^10+HH(3)*Bsbc(i)^9+HH(4)*Bsbc(i)^8+HH(5)*Bsbc(i)^7+HH(6)*Bsbc(i)^6+HH(7)*Bsbc(i)^5+HH(8)*Bsbc(i)^4+HH(9)*Bsbc(i)^3+HH(10)*Bsbc(i)^2+HH(11)*Bsbc(i)+HH(12);
        else 
                Hsbc(i)=1.8e5+(Bsbc(i)-2.15)*((1.695e5)/0.15);
            end
        end
    end
    MMFsbc(i)=Hsbc(i)*lbcs;
    Brbc(i)=phi(i)/(2*L*Wbcr);
    if Brbc(i)<=1.06
        Hrbc(i)=200*Brbc(i)/1.06;
    else if Brbc(i)<=1.28
            Hrbc(i)=200+(200/0.22)*(Brbc(i)-1.06);
        else if Brbc(i)<=2.3
    Hrbc(i)=HH(1)*Brbc(i)^11+HH(2)*Brbc(i)^10+HH(3)*Brbc(i)^9+HH(4)*Brbc(i)^8+HH(5)*Brbc(i)^7+HH(6)*Brbc(i)^6+HH(7)*Brbc(i)^5+HH(8)*Brbc(i)^4+HH(9)*Brbc(i)^3+HH(10)*Brbc(i)^2+HH(11)*Brbc(i)+HH(12);
        else 
                Hrbc(i)=1.8e5+(Brbc(i)-2.15)*((1.695e5)/0.15);
            end
        end
    end
    MMFrbc(i)=Hrbc(i)*lbcr;
    MMFOUT(i)=2*MMFsbt(i)+2*MMFrbt(i)+MMFsbc(i)+MMFrbc(i);
    
    %% Static torque and flux linkage calculations 
    
    
        for j=1:length(xn);
            phii(i)=phi(i)*0.0172/(L*lambdaA(j));
            phiii(i)=phi(i)*0.0172/(L*lambdaB(j));
            BA(i,j)=phii(i)/(0.0172*tnA(j));       % flux density in different positions for SRM A
            BB(i,j)=phiii(i)/(0.0172*tnB(j));       % flux density in different positions for SRM B
            if tnA(j)<0.3
                tnA1(j)=0.3;
                tnA2(j)=0.4;
                k=0;
            else if tnA(j)>0.5
                tnA1(j)=0.4;
                tnA2(j)=0.5;
                k=0;
            else if tnA(j)<0.4
                 tnA1(j)=0.3;
                 tnA2(j)=0.4;
                 k=10*(tnA(j)-0.3);
                else
                    tnA1(j)=0.4;
                    tnA2(j)=0.5;
                    k=10*(tnA(j)-0.4);
                end
                end
            end
            
            if tnB(j)<0.3
                tnB1(j)=0.3;
                tnB2(j)=0.4;
                k=0;
            else if tnB(j)>0.5
                tnB1(j)=0.4;
                tnB2(j)=0.5;
                k=0;
            else if tnB(j)<0.4
                 tnB1(j)=0.3;
                 tnB2(j)=0.4;
                 k=10*(tnB(j)-0.3);
                else
                    tnB1(j)=0.4;
                    tnB2(j)=0.5;
                    k=10*(tnB(j)-0.4);
                end
                end
            end
            
%             intest1=transpose([lambdagA(j) tnA1(j) xn(j) BA(i,j)]);
%             intest2=transpose([lambdagA(j) tnA2(j) xn(j) BA(i,j)]);
%             MMFAA1=nett1(intest1);
%             MMFAA2=nett1(intest2);
%             MMFAA=MMFAA1+(MMFAA2-MMFAA1)*k;
%             PnAA1=nett2(intest1);
%             PnAA2=nett2(intest2);
%             PnAA=PnAA1+(PnAA2-PnAA1)*k;
%             FAA1=nett3(intest1);
%             FAA2=nett3(intest2);
%             FAA=FAA1+(FAA2-FAA1)*k;


            depo(1)=lambdagA(j)-inputlambdag(1);
              
            for kkj=2:length(inputlambdag)
                if depo(1)<0
                    number=2;
                  break
              end
               depo(kkj)=lambdagA(j)-inputlambdag(kkj);
               if depo(kkj)*depo(kkj-1)<0
                  number=kkj; 
               end
            end
            
            for ijkj=1:33;
               if inputt(ijkj,1)-inputlambdag(number-1)==0 && inputt(ijkj,2)-tnA1(j)==0
                   data2=ijkj;
                   break
               end
            end
            
            
            for ijkj=1:33;
               if inputt(ijkj,1)-inputlambdag(number)==0 && inputt(ijkj,2)-tnA1(j)==0
                   data0=ijkj;
                   break
               end
            end
            
            for ijkj=1:33;
               if inputt(ijkj,1)-inputlambdag(number-1)==0 && inputt(ijkj,2)-tnA2(j)==0
                   data3=ijkj;
                   break
               end
            end
            
            for ijkj=1:33;
               if inputt(ijkj,1)-inputlambdag(number)==0 && inputt(ijkj,2)-tnA2(j)==0
                   data1=ijkj;
                   break
               end
            end

            x0=inputt(data0,2);
            x1=inputt(data3,2);
            y0=inputt(data3,1);
            y1=inputt(data1,1);
            x2=tnA(j);
            y2=lambdagA(j);
            Na=((x1-x2)*(y2-y0))/((x1-x0)*(y1-y0));
            Nb=((x2-x0)*(y2-y0))/((x1-x0)*(y1-y0));
            Nc=((x1-x2)*(y1-y2))/((x1-x0)*(y1-y0));
            Nd=((x2-x0)*(y1-y2))/((x1-x0)*(y1-y0));
            x=xn(j);
            y=BA(i,j);
            z0a=MMMFF(data0,1) + MMMFF(data0,2)*x + MMMFF(data0,3)*y + MMMFF(data0,4)*x^2 + MMMFF(data0,5)*x*y + MMMFF(data0,6)*y^2 + MMMFF(data0,7)*x^3 + MMMFF(data0,8)*x^2*y + MMMFF(data0,9)*x*y^2 + MMMFF(data0,10)*y^3+MMMFF(data0,11)*x^4 + MMMFF(data0,12)*x^3*y + MMMFF(data0,13)*x^2*y^2 + MMMFF(data0,14)*x*y^3 + MMMFF(data0,15)*y^4 + MMMFF(data0,16)*x^5 + MMMFF(data0,17)*x^4*y + MMMFF(data0,18)*x^3*y^2 + MMMFF(data0,19)*x^2*y^3 + MMMFF(data0,20)*x*y^4 + MMMFF(data0,21)*y^5;
            z1a=MMMFF(data1,1) + MMMFF(data1,2)*x + MMMFF(data1,3)*y + MMMFF(data1,4)*x^2 + MMMFF(data1,5)*x*y + MMMFF(data1,6)*y^2 + MMMFF(data1,7)*x^3 + MMMFF(data1,8)*x^2*y + MMMFF(data1,9)*x*y^2 + MMMFF(data1,10)*y^3+MMMFF(data1,11)*x^4 + MMMFF(data1,12)*x^3*y + MMMFF(data1,13)*x^2*y^2 + MMMFF(data1,14)*x*y^3 + MMMFF(data1,15)*y^4 + MMMFF(data1,16)*x^5 + MMMFF(data1,17)*x^4*y + MMMFF(data1,18)*x^3*y^2 + MMMFF(data1,19)*x^2*y^3 + MMMFF(data1,20)*x*y^4 + MMMFF(data1,21)*y^5;
            z2a=MMMFF(data2,1) + MMMFF(data2,2)*x + MMMFF(data2,3)*y + MMMFF(data2,4)*x^2 + MMMFF(data2,5)*x*y + MMMFF(data2,6)*y^2 + MMMFF(data2,7)*x^3 + MMMFF(data2,8)*x^2*y + MMMFF(data2,9)*x*y^2 + MMMFF(data2,10)*y^3+MMMFF(data2,11)*x^4 + MMMFF(data2,12)*x^3*y + MMMFF(data2,13)*x^2*y^2 + MMMFF(data2,14)*x*y^3 + MMMFF(data2,15)*y^4 + MMMFF(data2,16)*x^5 + MMMFF(data2,17)*x^4*y + MMMFF(data2,18)*x^3*y^2 + MMMFF(data2,19)*x^2*y^3 + MMMFF(data2,20)*x*y^4 + MMMFF(data2,21)*y^5;
            z3a=MMMFF(data3,1) + MMMFF(data3,2)*x + MMMFF(data3,3)*y + MMMFF(data3,4)*x^2 + MMMFF(data3,5)*x*y + MMMFF(data3,6)*y^2 + MMMFF(data3,7)*x^3 + MMMFF(data3,8)*x^2*y + MMMFF(data3,9)*x*y^2 + MMMFF(data3,10)*y^3+MMMFF(data3,11)*x^4 + MMMFF(data3,12)*x^3*y + MMMFF(data3,13)*x^2*y^2 + MMMFF(data3,14)*x*y^3 + MMMFF(data3,15)*y^4 + MMMFF(data3,16)*x^5 + MMMFF(data3,17)*x^4*y + MMMFF(data3,18)*x^3*y^2 + MMMFF(data3,19)*x^2*y^3 + MMMFF(data3,20)*x*y^4 + MMMFF(data3,21)*y^5;
            
            MMFAA=Na*z0a+Nb*z1a+Nc*z2a+Nd*z3a;
            
            z0b=PPnn(data0,1) + PPnn(data0,2)*x + PPnn(data0,3)*y + PPnn(data0,4)*x^2 + PPnn(data0,5)*x*y + PPnn(data0,6)*y^2 + PPnn(data0,7)*x^3 + PPnn(data0,8)*x^2*y + PPnn(data0,9)*x*y^2 + PPnn(data0,10)*y^3+PPnn(data0,11)*x^4 + PPnn(data0,12)*x^3*y + PPnn(data0,13)*x^2*y^2 + PPnn(data0,14)*x*y^3 + PPnn(data0,15)*y^4 + PPnn(data0,16)*x^5 + PPnn(data0,17)*x^4*y + PPnn(data0,18)*x^3*y^2 + PPnn(data0,19)*x^2*y^3 + PPnn(data0,20)*x*y^4 + PPnn(data0,21)*y^5;
            z1b=PPnn(data1,1) + PPnn(data1,2)*x + PPnn(data1,3)*y + PPnn(data1,4)*x^2 + PPnn(data1,5)*x*y + PPnn(data1,6)*y^2 + PPnn(data1,7)*x^3 + PPnn(data1,8)*x^2*y + PPnn(data1,9)*x*y^2 + PPnn(data1,10)*y^3+PPnn(data1,11)*x^4 + PPnn(data1,12)*x^3*y + PPnn(data1,13)*x^2*y^2 + PPnn(data1,14)*x*y^3 + PPnn(data1,15)*y^4 + PPnn(data1,16)*x^5 + PPnn(data1,17)*x^4*y + PPnn(data1,18)*x^3*y^2 + PPnn(data1,19)*x^2*y^3 + PPnn(data1,20)*x*y^4 + PPnn(data1,21)*y^5;
            z2b=PPnn(data2,1) + PPnn(data2,2)*x + PPnn(data2,3)*y + PPnn(data2,4)*x^2 + PPnn(data2,5)*x*y + PPnn(data2,6)*y^2 + PPnn(data2,7)*x^3 + PPnn(data2,8)*x^2*y + PPnn(data2,9)*x*y^2 + PPnn(data2,10)*y^3+PPnn(data2,11)*x^4 + PPnn(data2,12)*x^3*y + PPnn(data2,13)*x^2*y^2 + PPnn(data2,14)*x*y^3 + PPnn(data2,15)*y^4 + PPnn(data2,16)*x^5 + PPnn(data2,17)*x^4*y + PPnn(data2,18)*x^3*y^2 + PPnn(data2,19)*x^2*y^3 + PPnn(data2,20)*x*y^4 + PPnn(data2,21)*y^5;
            z3b=PPnn(data3,1) + PPnn(data3,2)*x + PPnn(data3,3)*y + PPnn(data3,4)*x^2 + PPnn(data3,5)*x*y + PPnn(data3,6)*y^2 + PPnn(data3,7)*x^3 + PPnn(data3,8)*x^2*y + PPnn(data3,9)*x*y^2 + PPnn(data3,10)*y^3+PPnn(data3,11)*x^4 + PPnn(data3,12)*x^3*y + PPnn(data3,13)*x^2*y^2 + PPnn(data3,14)*x*y^3 + PPnn(data3,15)*y^4 + PPnn(data3,16)*x^5 + PPnn(data3,17)*x^4*y + PPnn(data3,18)*x^3*y^2 + PPnn(data3,19)*x^2*y^3 + PPnn(data3,20)*x*y^4 + PPnn(data3,21)*y^5;

            PnAA=Na*z0b+Nb*z1b+Nc*z2b+Nd*z3b;
            
            z0c=FFAA(data0,1) + FFAA(data0,2)*x + FFAA(data0,3)*y + FFAA(data0,4)*x^2 + FFAA(data0,5)*x*y + FFAA(data0,6)*y^2 + FFAA(data0,7)*x^3 + FFAA(data0,8)*x^2*y + FFAA(data0,9)*x*y^2 + FFAA(data0,10)*y^3+FFAA(data0,11)*x^4 + FFAA(data0,12)*x^3*y + FFAA(data0,13)*x^2*y^2 + FFAA(data0,14)*x*y^3 + FFAA(data0,15)*y^4 + FFAA(data0,16)*x^5 + FFAA(data0,17)*x^4*y + FFAA(data0,18)*x^3*y^2 + FFAA(data0,19)*x^2*y^3 + FFAA(data0,20)*x*y^4 + FFAA(data0,21)*y^5;
            z1c=FFAA(data1,1) + FFAA(data1,2)*x + FFAA(data1,3)*y + FFAA(data1,4)*x^2 + FFAA(data1,5)*x*y + FFAA(data1,6)*y^2 + FFAA(data1,7)*x^3 + FFAA(data1,8)*x^2*y + FFAA(data1,9)*x*y^2 + FFAA(data1,10)*y^3+FFAA(data1,11)*x^4 + FFAA(data1,12)*x^3*y + FFAA(data1,13)*x^2*y^2 + FFAA(data1,14)*x*y^3 + FFAA(data1,15)*y^4 + FFAA(data1,16)*x^5 + FFAA(data1,17)*x^4*y + FFAA(data1,18)*x^3*y^2 + FFAA(data1,19)*x^2*y^3 + FFAA(data1,20)*x*y^4 + FFAA(data1,21)*y^5;
            z2c=FFAA(data2,1) + FFAA(data2,2)*x + FFAA(data2,3)*y + FFAA(data2,4)*x^2 + FFAA(data2,5)*x*y + FFAA(data2,6)*y^2 + FFAA(data2,7)*x^3 + FFAA(data2,8)*x^2*y + FFAA(data2,9)*x*y^2 + FFAA(data2,10)*y^3+FFAA(data2,11)*x^4 + FFAA(data2,12)*x^3*y + FFAA(data2,13)*x^2*y^2 + FFAA(data2,14)*x*y^3 + FFAA(data2,15)*y^4 + FFAA(data2,16)*x^5 + FFAA(data2,17)*x^4*y + FFAA(data2,18)*x^3*y^2 + FFAA(data2,19)*x^2*y^3 + FFAA(data2,20)*x*y^4 + FFAA(data2,21)*y^5;
            z3c=FFAA(data3,1) + FFAA(data3,2)*x + FFAA(data3,3)*y + FFAA(data3,4)*x^2 + FFAA(data3,5)*x*y + FFAA(data3,6)*y^2 + FFAA(data3,7)*x^3 + FFAA(data3,8)*x^2*y + FFAA(data3,9)*x*y^2 + FFAA(data3,10)*y^3+FFAA(data3,11)*x^4 + FFAA(data3,12)*x^3*y + FFAA(data3,13)*x^2*y^2 + FFAA(data3,14)*x*y^3 + FFAA(data3,15)*y^4 + FFAA(data3,16)*x^5 + FFAA(data3,17)*x^4*y + FFAA(data3,18)*x^3*y^2 + FFAA(data3,19)*x^2*y^3 + FFAA(data3,20)*x*y^4 + FFAA(data3,21)*y^5;

            FAA=Na*z0c+Nb*z1c+Nc*z2c+Nd*z3c;
            
            
            MMFA(i,j)=(MMFAA*lambdaA(j))/0.0172;
            PnA(i,j)=PnAA;
            PA(i,j)=mu*lambdaA(j)*L*PnA(i,j)/g;
            FA(i,j)=FAA*lambdaA(j)/0.0172;
            
%             intest1=transpose([lambdagB(j) tnB1(j) xn(j) BB(i,j)]);
%             intest2=transpose([lambdagB(j) tnB2(j) xn(j) BB(i,j)]);
%             MMFBB1=nett1(intest1);
%             MMFBB2=nett1(intest2);
%             MMFBB=MMFBB1+(MMFBB2-MMFBB1)*k;
%             PnBB1=nett2(intest1);
%             PnBB2=nett2(intest2);
%             PnBB=PnBB1+(PnBB2-PnBB1)*k;
%             FBB1=nett3(intest1);
%             FBB2=nett3(intest2);
%             FBB=FBB1+(FBB2-FBB1)*k;

            clear depo
            depo(1)=lambdagB(j)-inputlambdag(1);
              
            for kkj=2:length(inputlambdag)
                if depo(1)<0
                    number=2;
                  break
              end
               depo(kkj)=lambdagB(j)-inputlambdag(kkj);
               if depo(kkj)*depo(kkj-1)<0
                  number=kkj; 
               end
            end
            
            for ijkj=1:33;
               if inputt(ijkj,1)-inputlambdag(number-1)==0 && inputt(ijkj,2)-tnB1(j)==0
                   data2=ijkj;
                   break
               end
            end
            
            
            for ijkj=1:33;
               if inputt(ijkj,1)-inputlambdag(number)==0 && inputt(ijkj,2)-tnB1(j)==0
                   data0=ijkj;
                   break
               end
            end
            
            for ijkj=1:33;
               if inputt(ijkj,1)-inputlambdag(number-1)==0 && inputt(ijkj,2)-tnB2(j)==0
                   data3=ijkj;
                   break
               end
            end
            
            for ijkj=1:33;
               if inputt(ijkj,1)-inputlambdag(number)==0 && inputt(ijkj,2)-tnB2(j)==0
                   data1=ijkj;
                   break
               end
            end

            x0=inputt(data0,2);
            x1=inputt(data3,2);
            y0=inputt(data3,1);
            y1=inputt(data1,1);
            x2=tnB(j);
            y2=lambdagB(j);
            Na=((x1-x2)*(y2-y0))/((x1-x0)*(y1-y0));
            Nb=((x2-x0)*(y2-y0))/((x1-x0)*(y1-y0));
            Nc=((x1-x2)*(y1-y2))/((x1-x0)*(y1-y0));
            Nd=((x2-x0)*(y1-y2))/((x1-x0)*(y1-y0));
            x=xn(j);
            y=BB(i,j);
            z0a=MMMFF(data0,1) + MMMFF(data0,2)*x + MMMFF(data0,3)*y + MMMFF(data0,4)*x^2 + MMMFF(data0,5)*x*y + MMMFF(data0,6)*y^2 + MMMFF(data0,7)*x^3 + MMMFF(data0,8)*x^2*y + MMMFF(data0,9)*x*y^2 + MMMFF(data0,10)*y^3+MMMFF(data0,11)*x^4 + MMMFF(data0,12)*x^3*y + MMMFF(data0,13)*x^2*y^2 + MMMFF(data0,14)*x*y^3 + MMMFF(data0,15)*y^4 + MMMFF(data0,16)*x^5 + MMMFF(data0,17)*x^4*y + MMMFF(data0,18)*x^3*y^2 + MMMFF(data0,19)*x^2*y^3 + MMMFF(data0,20)*x*y^4 + MMMFF(data0,21)*y^5;
            z1a=MMMFF(data1,1) + MMMFF(data1,2)*x + MMMFF(data1,3)*y + MMMFF(data1,4)*x^2 + MMMFF(data1,5)*x*y + MMMFF(data1,6)*y^2 + MMMFF(data1,7)*x^3 + MMMFF(data1,8)*x^2*y + MMMFF(data1,9)*x*y^2 + MMMFF(data1,10)*y^3+MMMFF(data1,11)*x^4 + MMMFF(data1,12)*x^3*y + MMMFF(data1,13)*x^2*y^2 + MMMFF(data1,14)*x*y^3 + MMMFF(data1,15)*y^4 + MMMFF(data1,16)*x^5 + MMMFF(data1,17)*x^4*y + MMMFF(data1,18)*x^3*y^2 + MMMFF(data1,19)*x^2*y^3 + MMMFF(data1,20)*x*y^4 + MMMFF(data1,21)*y^5;
            z2a=MMMFF(data2,1) + MMMFF(data2,2)*x + MMMFF(data2,3)*y + MMMFF(data2,4)*x^2 + MMMFF(data2,5)*x*y + MMMFF(data2,6)*y^2 + MMMFF(data2,7)*x^3 + MMMFF(data2,8)*x^2*y + MMMFF(data2,9)*x*y^2 + MMMFF(data2,10)*y^3+MMMFF(data2,11)*x^4 + MMMFF(data2,12)*x^3*y + MMMFF(data2,13)*x^2*y^2 + MMMFF(data2,14)*x*y^3 + MMMFF(data2,15)*y^4 + MMMFF(data2,16)*x^5 + MMMFF(data2,17)*x^4*y + MMMFF(data2,18)*x^3*y^2 + MMMFF(data2,19)*x^2*y^3 + MMMFF(data2,20)*x*y^4 + MMMFF(data2,21)*y^5;
            z3a=MMMFF(data3,1) + MMMFF(data3,2)*x + MMMFF(data3,3)*y + MMMFF(data3,4)*x^2 + MMMFF(data3,5)*x*y + MMMFF(data3,6)*y^2 + MMMFF(data3,7)*x^3 + MMMFF(data3,8)*x^2*y + MMMFF(data3,9)*x*y^2 + MMMFF(data3,10)*y^3+MMMFF(data3,11)*x^4 + MMMFF(data3,12)*x^3*y + MMMFF(data3,13)*x^2*y^2 + MMMFF(data3,14)*x*y^3 + MMMFF(data3,15)*y^4 + MMMFF(data3,16)*x^5 + MMMFF(data3,17)*x^4*y + MMMFF(data3,18)*x^3*y^2 + MMMFF(data3,19)*x^2*y^3 + MMMFF(data3,20)*x*y^4 + MMMFF(data3,21)*y^5;
            
            MMFBB=Na*z0a+Nb*z1a+Nc*z2a+Nd*z3a;
            
            z0b=PPnn(data0,1) + PPnn(data0,2)*x + PPnn(data0,3)*y + PPnn(data0,4)*x^2 + PPnn(data0,5)*x*y + PPnn(data0,6)*y^2 + PPnn(data0,7)*x^3 + PPnn(data0,8)*x^2*y + PPnn(data0,9)*x*y^2 + PPnn(data0,10)*y^3+PPnn(data0,11)*x^4 + PPnn(data0,12)*x^3*y + PPnn(data0,13)*x^2*y^2 + PPnn(data0,14)*x*y^3 + PPnn(data0,15)*y^4 + PPnn(data0,16)*x^5 + PPnn(data0,17)*x^4*y + PPnn(data0,18)*x^3*y^2 + PPnn(data0,19)*x^2*y^3 + PPnn(data0,20)*x*y^4 + PPnn(data0,21)*y^5;
            z1b=PPnn(data1,1) + PPnn(data1,2)*x + PPnn(data1,3)*y + PPnn(data1,4)*x^2 + PPnn(data1,5)*x*y + PPnn(data1,6)*y^2 + PPnn(data1,7)*x^3 + PPnn(data1,8)*x^2*y + PPnn(data1,9)*x*y^2 + PPnn(data1,10)*y^3+PPnn(data1,11)*x^4 + PPnn(data1,12)*x^3*y + PPnn(data1,13)*x^2*y^2 + PPnn(data1,14)*x*y^3 + PPnn(data1,15)*y^4 + PPnn(data1,16)*x^5 + PPnn(data1,17)*x^4*y + PPnn(data1,18)*x^3*y^2 + PPnn(data1,19)*x^2*y^3 + PPnn(data1,20)*x*y^4 + PPnn(data1,21)*y^5;
            z2b=PPnn(data2,1) + PPnn(data2,2)*x + PPnn(data2,3)*y + PPnn(data2,4)*x^2 + PPnn(data2,5)*x*y + PPnn(data2,6)*y^2 + PPnn(data2,7)*x^3 + PPnn(data2,8)*x^2*y + PPnn(data2,9)*x*y^2 + PPnn(data2,10)*y^3+PPnn(data2,11)*x^4 + PPnn(data2,12)*x^3*y + PPnn(data2,13)*x^2*y^2 + PPnn(data2,14)*x*y^3 + PPnn(data2,15)*y^4 + PPnn(data2,16)*x^5 + PPnn(data2,17)*x^4*y + PPnn(data2,18)*x^3*y^2 + PPnn(data2,19)*x^2*y^3 + PPnn(data2,20)*x*y^4 + PPnn(data2,21)*y^5;
            z3b=PPnn(data3,1) + PPnn(data3,2)*x + PPnn(data3,3)*y + PPnn(data3,4)*x^2 + PPnn(data3,5)*x*y + PPnn(data3,6)*y^2 + PPnn(data3,7)*x^3 + PPnn(data3,8)*x^2*y + PPnn(data3,9)*x*y^2 + PPnn(data3,10)*y^3+PPnn(data3,11)*x^4 + PPnn(data3,12)*x^3*y + PPnn(data3,13)*x^2*y^2 + PPnn(data3,14)*x*y^3 + PPnn(data3,15)*y^4 + PPnn(data3,16)*x^5 + PPnn(data3,17)*x^4*y + PPnn(data3,18)*x^3*y^2 + PPnn(data3,19)*x^2*y^3 + PPnn(data3,20)*x*y^4 + PPnn(data3,21)*y^5;

            PnBB=Na*z0b+Nb*z1b+Nc*z2b+Nd*z3b;
            
            z0c=FFAA(data0,1) + FFAA(data0,2)*x + FFAA(data0,3)*y + FFAA(data0,4)*x^2 + FFAA(data0,5)*x*y + FFAA(data0,6)*y^2 + FFAA(data0,7)*x^3 + FFAA(data0,8)*x^2*y + FFAA(data0,9)*x*y^2 + FFAA(data0,10)*y^3+FFAA(data0,11)*x^4 + FFAA(data0,12)*x^3*y + FFAA(data0,13)*x^2*y^2 + FFAA(data0,14)*x*y^3 + FFAA(data0,15)*y^4 + FFAA(data0,16)*x^5 + FFAA(data0,17)*x^4*y + FFAA(data0,18)*x^3*y^2 + FFAA(data0,19)*x^2*y^3 + FFAA(data0,20)*x*y^4 + FFAA(data0,21)*y^5;
            z1c=FFAA(data1,1) + FFAA(data1,2)*x + FFAA(data1,3)*y + FFAA(data1,4)*x^2 + FFAA(data1,5)*x*y + FFAA(data1,6)*y^2 + FFAA(data1,7)*x^3 + FFAA(data1,8)*x^2*y + FFAA(data1,9)*x*y^2 + FFAA(data1,10)*y^3+FFAA(data1,11)*x^4 + FFAA(data1,12)*x^3*y + FFAA(data1,13)*x^2*y^2 + FFAA(data1,14)*x*y^3 + FFAA(data1,15)*y^4 + FFAA(data1,16)*x^5 + FFAA(data1,17)*x^4*y + FFAA(data1,18)*x^3*y^2 + FFAA(data1,19)*x^2*y^3 + FFAA(data1,20)*x*y^4 + FFAA(data1,21)*y^5;
            z2c=FFAA(data2,1) + FFAA(data2,2)*x + FFAA(data2,3)*y + FFAA(data2,4)*x^2 + FFAA(data2,5)*x*y + FFAA(data2,6)*y^2 + FFAA(data2,7)*x^3 + FFAA(data2,8)*x^2*y + FFAA(data2,9)*x*y^2 + FFAA(data2,10)*y^3+FFAA(data2,11)*x^4 + FFAA(data2,12)*x^3*y + FFAA(data2,13)*x^2*y^2 + FFAA(data2,14)*x*y^3 + FFAA(data2,15)*y^4 + FFAA(data2,16)*x^5 + FFAA(data2,17)*x^4*y + FFAA(data2,18)*x^3*y^2 + FFAA(data2,19)*x^2*y^3 + FFAA(data2,20)*x*y^4 + FFAA(data2,21)*y^5;
            z3c=FFAA(data3,1) + FFAA(data3,2)*x + FFAA(data3,3)*y + FFAA(data3,4)*x^2 + FFAA(data3,5)*x*y + FFAA(data3,6)*y^2 + FFAA(data3,7)*x^3 + FFAA(data3,8)*x^2*y + FFAA(data3,9)*x*y^2 + FFAA(data3,10)*y^3+FFAA(data3,11)*x^4 + FFAA(data3,12)*x^3*y + FFAA(data3,13)*x^2*y^2 + FFAA(data3,14)*x*y^3 + FFAA(data3,15)*y^4 + FFAA(data3,16)*x^5 + FFAA(data3,17)*x^4*y + FFAA(data3,18)*x^3*y^2 + FFAA(data3,19)*x^2*y^3 + FFAA(data3,20)*x*y^4 + FFAA(data3,21)*y^5;

            FBB=Na*z0c+Nb*z1c+Nc*z2c+Nd*z3c;
            
            
            MMFB(i,j)=(MMFBB*lambdaB(j))/0.0172;
            PnB(i,j)=PnBB;
            PB(i,j)=mu*lambdaB(j)*L*PnB(i,j)/g;
            FB(i,j)=FBB*lambdaB(j)/0.0172;
            F(i,j)=Ns*((FA(i,j)+FB(i,j))/(2*q));    % Force in two air gap regions(two or coefficients of two(depends on Ns and Nr))
            Pn(i,j)=(2*PnA(i,j)*PnB(i,j))/(PnA(i,j)+PnB(i,j));    % Normalized permenace of one air gap region
            P(i,j)=(2*PA(i,j)*PB(i,j))/(PA(i,j)+PB(i,j));    % permenace of one air gap region
            MMF1(i,j)=2*((MMFA(i,j)+MMFB(i,j))/2);    %% MMF drop mon 2 air gap regions 
            MMF2(i,j)=(2*phi(i))/P(i,j);       %% MMF drop on 2 air gap regions
            
            MMFtotal(i,j)=MMF1(i,j)+MMFOUT(i);
           
            %%phhi(i)=MMF2(i,j)*P(i,j);
            
            
            
            T(i,j)=0.5*F(i,j)*Dor*L;   % Torque calcuation
            Itr(i,j)=MMF1(i,j)/(2*N);   % Current due to tooth region MMF drop
            I(i,j)=MMFtotal(i,j)/(2*N);   %Required excitation Current in two seried windings of one phase
            Iphase(i,j)=I(i,j)*Ns/(2*q);   %%Total Required phase current
            FL(i)=1*2*N*phi(i);    % Flux linkage calculation (Phase flux linkage)
    
    
        end
        
        
        
    %B(i+1)=B(i)+0.01;
end

%% Static plots

%    figure
%    for i=1:length(xn)
%    plot(Iphase(:,i),FL);
%    hold on
%    %plot(I(:,1),FL,I(:,2),FL,I(:,3),FL,I(:,4),FL,I(:,5),FL,I(:,6),FL);
%    end
%    xlabel('Current');
%    ylabel('Flux linkage')
%    title('Flux linkage-PHASE current-position graph')

   
       for k=1:length(xn)
           qq=1;
           II=0.5;
       for j=1:length(B)
          
            if (II-Iphase(j,k))<0.02
               Inew(qq,k)=Iphase(j,k);
               Tnew(qq,k)=T(j,k);
               Itrnew(qq,k)=Itr(j,k);   %%% Current required in two series windings of a phase to establish the MMF in a pair of tooth regions
               II=II+0.5;
               qq=qq+1;
            else
            end
              
           
          end
       end

% figure       
% plot(xn,Tnew(1,:),xn,Tnew(2,:),xn,Tnew(3,:),xn,Tnew(4,:),xn,Tnew(5,:),xn,Tnew(6,:),xn,Tnew(7,:));
% xlabel('xn')
% ylabel('static torque')
% title('Static torque-Xn-current for different PHASE currents')


%% Calculation of motor Volume and mass in different parts
Vbcs=pi*L*(((Dos/2)^2)-(((Dos/2)-Wbcs)^2));   %%% Stator back core volume
Mbcs=ro*Vbcs;     %% Stator back core mass
Vbcr=pi*L*((((Dor/2)-hr)^2)-(((Dor/2)-hr-Wbcr)^2));    %%% Rotor back core volume
Mbcr=ro*Vbcr;       %%% Rotor back core mass
Vts=Ats*L;;    %%%All Stator teeth volume
%Ats=Ns*tss(3)*hs;    %%% All stator teeth area
Mts=ro*Vts;      %%%All Stator teeth mass
Vtr=Nr*L*tr*hr;        %%%All Rotor teeth volume
Mtr=ro*Vtr;       %%%All Rotor teeth mass
Vshaft=pi*L*((Ds/2)^2);      %%% shaft volume
Vmnoshaft=Vbcs+Vbcr+Vts+Vtr;   %%% Motor volume except shaft
Mmnoshaft=ro*Vmnoshaft;    %%%Motor mass except shaft and copper
Vm=Vbcs+Vbcr+Vts+Vtr+Vshaft;
Lcu=Lw*Ns/2;   %%% total copper length
Vcu=Lcu*Awire;  %%% total copper volume
Mcu=rocu*Vcu;  %% total copper mass in kg

Mactive=Mmnoshaft+Mcu;  %% motor total active mass (steel and copper)


%% Training networks for dynamic caluclations


counter=1;
for i=1:length(xn)
    
    for j=1:length(B)
       intrain1(counter,1)=xn(i);
       intrain1(counter,2)=FL(j);
       outtrain4(counter,1)=I(j,i);
       outtrain5(counter,1)=T(j,i);
        counter=counter+1;
    end
end

% nett4 = newff(transpose(intrain1),transpose(outtrain4),30,{},'trainlm');
% nett4.trainParam.showWindow = false;
% nett4.trainParam.showCommandLine = false; 
% nett4 = train(nett4,transpose(intrain1),transpose(outtrain4));
% 
% nett5 = newff(transpose(intrain1),transpose(outtrain5),30,{},'trainlm');
% nett5.trainParam.showWindow = false;
% nett5.trainParam.showCommandLine = false; 
% nett5 = train(nett5,transpose(intrain1),transpose(outtrain5));

nett4=fit([intrain1(:,1),intrain1(:,2)],outtrain4,'poly55');
nett5=fit([intrain1(:,1),intrain1(:,2)],outtrain5,'poly55');


%% Dynamic calculations

% V=300;   %supply voltage
% q=Ns/gcd(Ns,Nr);   % number of stator phases
% Imax=3.15;   %maximum chopping current
% Imin=2.85;    %minimum chopping current
% nm=500*pi/30;    %rotor mechanical speed
% AA=7.5;     %advanced angle
% ep=0.5;   %excitation period in per unit
% R=5.2;     %phase resistance


clear x;
clear DFL;

Di1(1)=0;    %%% initial dynamic current
DFL(1)=0;   %%% initial Dynamic flux linkage
teta(1)=tetaon;    % in radians
%epe=ep*180;    % electrical degree excitation period
epe=(ep*360)/(deltateta*q);
epe=epe*pi/180;  %% excitation period in radians
tetaoff=tetaon+epe;   %% in radians



x=tetaon:h:(tetaon+epe);
i=1;   %%counter
remaining=length(x)-i;
for counter=1:(length(x)-1)
    
    if teta(i)>tetaoff
        break
    end
    
    
    
    for j=1:length(x)
        
    if teta(i)>tetaoff
        break
    end
    
        
        
    if teta(i)<0
        Dxn1(i)=(teta(i)/pi)+1;
        Di1(i)=nett4([Dxn1(i),DFL(i)]);    % dynamic phase current
        DT(i)=(-1)*nett5([Dxn1(i),DFL(i)]);    % Dynamic torque
    else if teta(i)<pi
            Dxn1(i)=1-(teta(i)/pi);
            Di1(i)=nett4([Dxn1(i),DFL(i)]);    % dynamic phase current
            DT(i)=nett5([Dxn1(i),DFL(i)]);    % Dynamic torque
        else
            Dxn1(i)=(teta(i)/pi)-1;
            Di1(i)=nett4([Dxn1(i),DFL(i)]);    % dynamic phase current
            DT(i)=(-1)*nett5([Dxn1(i),DFL(i)]);    % Dynamic torque
    
        end
    end
    
    k1=(V-R*Di1(i))/n;
    
    if Di1(i)>Imax
        break
    end
    
    clc
    totalremaining=totalremaining;
        remaining=remaining-1
        iterations=iterations
        
    if (teta(i)+0.5*h)<0
        Dxn2(i)=((teta(i)+0.5*h)/pi)+1;
        Di2(i)=nett4([Dxn2(i),(DFL(i)+0.5*k1*h)]);    % dynamic phase current
        k2=(V-R*Di2(i))/n;
        Di3(i)=nett4([Dxn2(i),(DFL(i)+0.5*k2*h)]);
        k3=(V-R*Di3(i))/n;
    else if (teta(i)+0.5*h)<pi
            Dxn2(i)=1-((teta(i)+0.5*h)/pi);
            Di2(i)=nett4([Dxn2(i),(DFL(i)+0.5*k1*h)]);
            k2=(V-R*Di2(i))/n;
            Di3(i)=nett4([Dxn2(i),(DFL(i)+0.5*k2*h)]);
            k3=(V-R*Di3(i))/n;
        else
            Dxn2(i)=((teta(i)+0.5*h)/pi)-1;
            Di2(i)=nett4([Dxn2(i),(DFL(i)+0.5*k1*h)]);
            k2=(V-R*Di2(i))/n;
            Di3(i)=nett4([Dxn2(i),(DFL(i)+0.5*k2*h)]);
            k3=(V-R*Di3(i))/n;
        end
    end
    
    if (teta(i)+h)<0
        Dxn4(i)=((teta(i)+h)/pi)+1;
        Di4(i)=nett4([Dxn4(i),(DFL(i)+k3*h)]);    % dynamic phase current
        else if (teta(i)+h)<pi
                Dxn4(i)=1-((teta(i)+h)/pi);
                Di4(i)=nett4([Dxn4(i),(DFL(i)+k3*h)]);
            else
                Dxn4(i)=((teta(i)+h)/pi)-1;
                Di4(i)=nett4([Dxn4(i),(DFL(i)+k3*h)]);
            end
    end
    k4=(V-R*Di4(i))/n;
    
    
    
    DFL(i+1)=DFL(i)+(h/6)*(k1+2*k2+2*k3+k4);
    teta(i+1)=teta(i)+h;
    
    i=i+1;
    
        
    if i>length(x)
        break
    end
    end
  
    
 for j=1:length(x)
        
    if teta(i)>tetaoff
        break
    end
    
        
        clc
        totalremaining=totalremaining;
        remaining=remaining-1
        iterations=iterations
        
    if teta(i)<0
        Dxn1(i)=(teta(i)/pi)+1;
        Di1(i)=nett4([Dxn1(i),DFL(i)]);    % dynamic phase current
        DT(i)=(-1)*nett5([Dxn1(i),DFL(i)]);    % Dynamic torque
    else if teta(i)<pi
            Dxn1(i)=1-(teta(i)/pi);
            Di1(i)=nett4([Dxn1(i),DFL(i)]);    % dynamic phase current
            DT(i)=nett5([Dxn1(i),DFL(i)]);    % Dynamic torque
        else
            Dxn1(i)=(teta(i)/pi)-1;
            Di1(i)=nett4([Dxn1(i),DFL(i)]);    % dynamic phase current
            DT(i)=(-1)*nett5([Dxn1(i),DFL(i)]);    % Dynamic torque
    
        end
    
    end
    k1=(0-R*Di1(i))/n;
    if (teta(i)+0.5*h)<0
        Dxn2(i)=((teta(i)+0.5*h)/pi)+1;
        Di2(i)=nett4([Dxn2(i),(DFL(i)+0.5*k1*h)]);    % dynamic phase current
        k2=(0-R*Di2(i))/n;
        Di3(i)=nett4([Dxn2(i),(DFL(i)+0.5*k2*h)]);
        k3=(0-R*Di3(i))/n;
    else if (teta(i)+0.5*h)<pi
            Dxn2(i)=1-((teta(i)+0.5*h)/pi);
            Di2(i)=nett4([Dxn2(i),(DFL(i)+0.5*k1*h)]);
            k2=(0-R*Di2(i))/n;
            Di3(i)=nett4([Dxn2(i),(DFL(i)+0.5*k2*h)]);
            k3=(0-R*Di3(i))/n;
        else
            Dxn2(i)=((teta(i)+0.5*h)/pi)-1;
            Di2(i)=nett4([Dxn2(i),(DFL(i)+0.5*k1*h)]);
            k2=(0-R*Di2(i))/n;
            Di3(i)=nett4([Dxn2(i),(DFL(i)+0.5*k2*h)]);
            k3=(0-R*Di3(i))/n;
        end
    end
    
    if (teta(i)+h)<0
        Dxn4(i)=((teta(i)+h)/pi)+1;
        Di4(i)=nett4([Dxn4(i),(DFL(i)+k3*h)]);    % dynamic phase current
        else if (teta(i)+h)<pi
                Dxn4(i)=1-((teta(i)+h)/pi);
                Di4(i)=nett4([Dxn4(i),(DFL(i)+k3*h)]);
            else
                Dxn4(i)=((teta(i)+h)/pi)-1;
                Di4(i)=nett4([Dxn4(i),(DFL(i)+k3*h)]);
            end
    end
    k4=(0-R*Di4(i))/n;
    DFL(i+1)=DFL(i)+(h/6)*(k1+2*k2+2*k3+k4);
    
    teta(i+1)=teta(i)+h;
    i=i+1;
    
    if Di1(i-1)<Imin
        break
    end
    
    if i>length(x)
        break
    end
        end
        
end

%% Current falling section

for counter=1:(0.5*length(x))
  
    
    
    if teta(i)<0
        Dxn1(i)=(teta(i)/pi)+1;
        Di1(i)=nett4([Dxn1(i),DFL(i)]);    % dynamic phase current
        DT(i)=(-1)*nett5([Dxn1(i),DFL(i)]);    % Dynamic torque
    else if teta(i)<pi
            Dxn1(i)=1-(teta(i)/pi);
            Di1(i)=nett4([Dxn1(i),DFL(i)]);    % dynamic phase current
            DT(i)=nett5([Dxn1(i),DFL(i)]);    % Dynamic torque
        else
            Dxn1(i)=(teta(i)/pi)-1;
            Di1(i)=nett4([Dxn1(i),DFL(i)]);    % dynamic phase current
            DT(i)=(-1)*nett5([Dxn1(i),DFL(i)]);    % Dynamic torque
    
        end
    
    end
    
    if (Di1(i)-0.6*Imin)<0
        Di1(i)=0;
        DT(i)=0;
        DFL(i)=0;
        break
    end
    
    
    if (Di1(i)-Imax)>0
        Di1(i)=0;
        DT(i)=0;
        DFL(i)=0;
        break
    end
    
    k1=(((-1)*V)-R*Di1(i))/n;
    if (teta(i)+0.5*h)<0
        Dxn2(i)=((teta(i)+0.5*h)/pi)+1;
        Di2(i)=nett4([Dxn2(i),(DFL(i)+0.5*k1*h)]);    % dynamic phase current
        k2=(((-1)*V)-R*Di2(i))/n;
        Di3(i)=nett4([Dxn2(i),(DFL(i)+0.5*k2*h)]);
        k3=(((-1)*V)-R*Di3(i))/n;
    else if (teta(i)+0.5*h)<pi
            Dxn2(i)=1-((teta(i)+0.5*h)/pi);
            Di2(i)=nett4([Dxn2(i),(DFL(i)+0.5*k1*h)]);
            k2=(((-1)*V)-R*Di2(i))/n;
            Di3(i)=nett4([Dxn2(i),(DFL(i)+0.5*k2*h)]);
            k3=(((-1)*V)-R*Di3(i))/n;
        else
            Dxn2(i)=((teta(i)+0.5*h)/pi)-1;
            Di2(i)=nett4([Dxn2(i),(DFL(i)+0.5*k1*h)]);
            k2=(((-1)*V)-R*Di2(i))/n;
            Di3(i)=nett4([Dxn2(i),(DFL(i)+0.5*k2*h)]);
            k3=(((-1)*V)-R*Di3(i))/n;
        end
    end
    
    if (teta(i)+h)<0
        Dxn4(i)=((teta(i)+h)/pi)+1;
        Di4(i)=nett4([Dxn4(i),(DFL(i)+k3*h)]);    % dynamic phase current
        else if (teta(i)+h)<pi
                Dxn4(i)=1-((teta(i)+h)/pi);
                Di4(i)=nett4([Dxn4(i),(DFL(i)+k3*h)]);
            else
                Dxn4(i)=((teta(i)+h)/pi)-1;
                Di4(i)=nett4([Dxn4(i),(DFL(i)+k3*h)]);
            end
    end
    k4=(((-1)*V)-R*Di4(i))/n;
    
    
    
    DFL(i+1)=DFL(i)+(h/6)*(k1+2*k2+2*k3+k4);
    
    teta(i+1)=teta(i)+h;
    i=i+1;
end
    
    
% figure
% plot(teta(1:1:i),Di1(1:1:i))
% xlabel('teta');
% ylabel('two series windings current in each phase');
% 
% figure
% plot(teta(1:1:i),Di1(1:1:i)*Ns/(2*q))
% xlabel('teta');
% ylabel('PHASE current');
% 
% figure
% plot(teta(1:1:i),DT(1:1:i))
% xlabel('teta');
% ylabel('phase torque');
% 
% 
% figure
% plot(teta(1:1:i),DFL(1:1:i))
% xlabel('teta');
% ylabel('Two series winding Flux Linkage');
% 
% 
% figure
% plot(teta(1:1:i),(1000*DFL(1:1:i)/(2*N)))
% xlabel('teta');
% ylabel('Tooth Flux(mWb)');
% 
% 
% figure
% plot(teta(1:1:i),(DFL(1:1:i)/(2*N*L*ts)))
% xlabel('teta');
% ylabel('Tooth Flux Density(T)');
% 
% figure
% plot(Di1(1:1:i),DFL(1:1:i))
% xlabel('Two series winding Current');
% ylabel('Two series winding Flux Linkage');

% figure
% for j=0:q
%     
%     plot(j*deltatetae+teta(1:1:i-1)*180/pi,Di1(1:1:i-1)*Ns/(2*q))
%     hold on
%     xlabel('teta(electrical degree)');
% ylabel('PHASE currents');
% 
% end
% 
% figure
% for j=0:q
%     
%     plot(j*deltatetae+teta(1:1:i-1)*180/pi,DT(1:1:i-1))
%     hold on
%     xlabel('teta(electrical degree)');
% ylabel('phase torques');
% end

%% calculation and plotting the total torque and branch current

clear tetatotal

for k=1:q*length(x)+i
    tetatotal(k)=tetaon+((k-1)*h*180/pi);
end



if q==4
    
Dia=zeros(1,q*length(x)+i);
Dib=zeros(1,q*length(x)+i);
Dic=zeros(1,q*length(x)+i);
Did=zeros(1,q*length(x)+i);
Die=zeros(1,q*length(x)+i);

for k=1:i
 Dia(k)=Di1(k)*Ns/(2*q);
 Dib(length(x)+k)=Di1(k)*Ns/(2*q);
 Dic(2*length(x)+k)=Di1(k)*Ns/(2*q);
 Did(3*length(x)+k)=Di1(k)*Ns/(2*q);
 Die(4*length(x)+k)=Di1(k)*Ns/(2*q);
end

Dia(length(x):i)=(-1).*Dia(length(x):i);
Dib(2*length(x):length(x)+i)=(-1).*Dib(2*length(x):1*length(x)+i);
Dic(3*length(x):2*length(x)+i)=(-1).*Dic(3*length(x):2*length(x)+i);
Did(4*length(x):3*length(x)+i)=(-1).*Did(4*length(x):3*length(x)+i);
Die(5*length(x):4*length(x)+i)=(-1).*Die(5*length(x):4*length(x)+i);

Ditotal=Dia+Dib+Dic+Did+Die;

else
    
Dia=zeros(1,q*length(x)+i);
Dib=zeros(1,q*length(x)+i);
Dic=zeros(1,q*length(x)+i);
Did=zeros(1,q*length(x)+i);

for k=1:i
 Dia(k)=Di1(k)*Ns/(2*q);
 Dib(length(x)+k)=Di1(k)*Ns/(2*q);
 Dic(2*length(x)+k)=Di1(k)*Ns/(2*q);
 Did(3*length(x)+k)=Di1(k)*Ns/(2*q);
 %%Die(3*length(x)+k)=Di1(k)*Ns/(2*q);
end

Dia(length(x):i)=(-1).*Dia(length(x):i);
Dib(2*length(x):length(x)+i)=(-1).*Dib(2*length(x):1*length(x)+i);
Dic(3*length(x):2*length(x)+i)=(-1).*Dic(3*length(x):2*length(x)+i);
Did(4*length(x):3*length(x)+i)=(-1).*Did(4*length(x):3*length(x)+i);
%%Die(5*length(x):4*length(x)+i)=(-1).*Die(5*length(x):4*length(x)+i);  

Ditotal=Dia+Dib+Dic+Did;
   
end


% figure
% plot(tetatotal,Ditotal)
% title('Total input Current-electrical angle graph')


if q==4
DTa=zeros(1,q*length(x)+i);
DTb=zeros(1,q*length(x)+i);
DTc=zeros(1,q*length(x)+i);
DTd=zeros(1,q*length(x)+i);
DTe=zeros(1,q*length(x)+i);

for k=1:i
 DTa(k)=DT(k);
 DTb(length(x)+k)=DT(k);
 DTc(2*length(x)+k)=DT(k);
 DTd(3*length(x)+k)=DT(k);
 DTe(4*length(x)+k)=DT(k);
end

DTtotal=DTa+DTb+DTc+DTd+DTe;

else
DTa=zeros(1,q*length(x)+i);
DTb=zeros(1,q*length(x)+i);
DTc=zeros(1,q*length(x)+i);
DTd=zeros(1,q*length(x)+i);
%%DTe=zeros(1,q*length(x)+i);

for k=1:i
 DTa(k)=DT(k);
 DTb(length(x)+k)=DT(k);
 DTc(2*length(x)+k)=DT(k);
 DTd(3*length(x)+k)=DT(k);
 %%DTe(4*length(x)+k)=DT(k);
end

DTtotal=DTa+DTb+DTc+DTd;
   
end
% figure
% plot(tetatotal,DTtotal)
% title('Total torque-electrical angle graph')



%% Solving the equation with another method

% n=(nm*360)/(deltateta*q);    % rotor speed in electrical degree
% deltateta=360/(q*Nr);   %mechanical degree between consective phases torques
% deltatetae=(deltateta*360)/(deltateta*q);   %% electrical degree between consective phases torques
% AAe=(AA*360)/(deltateta*q);  %% electrical AA
% tetaon=45-AAe;
% 
% 
% 
% 
% h=1/100;    % 1/400 or even smaller the best answer
% Di(1)=0;    %%% initial dynamic current
% DFL(1)=0;   %%% initial Dynamic flux linkage
% teta(1)=tetaon;
% epe=ep*180;    % electrical excitation period
% tetaoff=tetaon+epe;
% 
% 
% 
% x=tetaon:h:(tetaon+epe);
% i=1;   %%counter
% remaining=length(x)-i
% V=300;
% 
% for counter=1:length(x)-1
%     remaining=remaining-1
%     Dxn1(i)=1-(teta(i)/180);
%     Di(i)=nett4([Dxn1(i);DFL(i)]);
%     deltaFL(i)=((V-R*Di(i))*h*pi)/(n*180);
%     DFL(i+1)=DFL(i)+deltaFL(i);
%     teta(i+1)=teta(i)+h;
%     i=i+1;
%     
%     
%     
% end
% 
% clc
%     
% figure
% plot(teta(1:1:i-1),Di(1:1:i-1))
% xlabel('teta');
% ylabel('phase current');


%% Calculation of teeth and backcore fluxes in order to calculate core losses

flux(1:1:i)=DFL(1:1:i)/(2*N);  %% Pole flux
clear tetatotal2

for k=1:4*q*length(x)+i
    tetatotal2(k)=tetaon+((k-1)*h*180/pi);
end

if q==3

fluxsp1=zeros(1,4*q*length(x)+i);
fluxsp2=zeros(1,4*q*length(x)+i);
fluxsp3=zeros(1,4*q*length(x)+i);
fluxrp1=zeros(1,4*q*length(x)+i);
fluxrp2=zeros(1,4*q*length(x)+i);


for k=1:i
 fluxsp1(k)=flux(k);
 fluxsp2(length(x)+k)=flux(k);
 fluxsp3(2*length(x)+k)=flux(k);
 fluxsp1(3*length(x)+k)=flux(k);
 fluxsp2(4*length(x)+k)=flux(k);
 fluxsp3(5*length(x)+k)=flux(k);
 fluxsp1(6*length(x)+k)=flux(k);
 fluxsp2(7*length(x)+k)=flux(k);
 fluxsp3(8*length(x)+k)=flux(k);
 fluxsp1(9*length(x)+k)=flux(k);
 fluxsp2(10*length(x)+k)=flux(k);
 fluxsp3(11*length(x)+k)=flux(k);
 fluxsp1(12*length(x)+k)=flux(k);
 fluxrp1(k)=flux(k);
 fluxrp2(length(x)+k)=flux(k);
 fluxrp1(2*length(x)+k)=flux(k);
 fluxrp2(3*length(x)+k)=flux(k);
 fluxrp1(4*length(x)+k)=flux(k);
 fluxrp2(5*length(x)+k)=flux(k);
 fluxrp1(6*length(x)+k)=(-1)*flux(k);
 fluxrp2(7*length(x)+k)=(-1)*flux(k);
 fluxrp1(8*length(x)+k)=(-1)*flux(k);
 fluxrp2(9*length(x)+k)=(-1)*flux(k);
 fluxrp1(10*length(x)+k)=(-1)*flux(k);
 fluxrp2(11*length(x)+k)=(-1)*flux(k);
 fluxrp1(12*length(x)+k)=flux(k);
end


% figure
% plot(tetatotal2,fluxsp1)
% title('Variation of one stator pole flux')
% ylabel('flux (mWb)')

fluxsbc1=0.5*(((-1)*fluxsp1)+fluxsp2+fluxsp3);
fluxsbc2=0.5*(((-1)*fluxsp1)-fluxsp2+fluxsp3);
fluxsbc3=0.5*(((-1)*fluxsp1)-fluxsp2-fluxsp3);

% figure
% plot(tetatotal2,1000*fluxsbc1)
% title('Variation of stator back-core flux 1')
% ylabel('flux (mWb)')
% 
% figure
% plot(tetatotal2,1000*fluxrp1)
% title('Variation of rotor pole flux 1')
% ylabel('flux (mWb)')

fluxrbc1=0.5*(fluxrp1-fluxrp2);
fluxrbc2=0.5*(fluxrp1+fluxrp2);

% figure
% plot(tetatotal2,1000*fluxrbc1)
% title('Variation of rotor back-core flux 1')
% ylabel('flux (mWb)')


else
    
fluxsp1=zeros(1,4*q*length(x)+i);
fluxsp2=zeros(1,4*q*length(x)+i);
fluxsp3=zeros(1,4*q*length(x)+i);
fluxsp4=zeros(1,4*q*length(x)+i);
fluxrp1=zeros(1,4*q*length(x)+i);
fluxrp2=zeros(1,4*q*length(x)+i);
fluxrp3=zeros(1,4*q*length(x)+i);


for k=1:i
 fluxsp1(k)=flux(k);
 fluxsp2(length(x)+k)=flux(k);
 fluxsp3(2*length(x)+k)=flux(k);
 fluxsp4(3*length(x)+k)=flux(k);
 fluxsp1(4*length(x)+k)=flux(k);
 fluxsp2(5*length(x)+k)=flux(k);
 fluxsp3(6*length(x)+k)=flux(k);
 fluxsp4(7*length(x)+k)=flux(k);
 fluxsp1(8*length(x)+k)=flux(k);
 fluxsp2(9*length(x)+k)=flux(k);
 fluxsp3(10*length(x)+k)=flux(k);
 fluxsp4(11*length(x)+k)=flux(k);
 fluxsp1(12*length(x)+k)=flux(k);
 fluxsp2(13*length(x)+k)=flux(k);
 fluxsp3(14*length(x)+k)=flux(k);
 fluxsp4(15*length(x)+k)=flux(k);
 fluxsp1(16*length(x)+k)=flux(k);
 fluxrp1(k)=flux(k);
 fluxrp2(length(x)+k)=flux(k);
 fluxrp3(2*length(x)+k)=flux(k);
 fluxrp1(3*length(x)+k)=flux(k);
 fluxrp2(4*length(x)+k)=flux(k);
 fluxrp3(5*length(x)+k)=flux(k);
 fluxrp1(6*length(x)+k)=flux(k);
 fluxrp2(7*length(x)+k)=flux(k);
 fluxrp3(8*length(x)+k)=flux(k);
 fluxrp1(9*length(x)+k)=flux(k);
 fluxrp2(10*length(x)+k)=flux(k);
 fluxrp3(11*length(x)+k)=flux(k);
 fluxrp1(12*length(x)+k)=(-1)*flux(k);
 fluxrp2(13*length(x)+k)=(-1)*flux(k);
 fluxrp3(14*length(x)+k)=(-1)*flux(k);
 fluxrp1(15*length(x)+k)=(-1)*flux(k);
 fluxrp2(16*length(x)+k)=(-1)*flux(k);
end



% figure
% plot(tetatotal2,1000*fluxsp1)
% title('Variation of one stator pole flux')
% ylabel('flux (mWb)')

fluxsbc1=0.5*(((-1)*fluxsp1)+fluxsp2+fluxsp3+fluxsp4);
fluxsbc2=0.5*(((-1)*fluxsp1)-fluxsp2+fluxsp3+fluxsp4);
fluxsbc3=0.5*(((-1)*fluxsp1)-fluxsp2-fluxsp3+fluxsp4);
fluxsbc4=0.5*(((-1)*fluxsp1)-fluxsp2-fluxsp3-fluxsp4);

% figure
% plot(tetatotal2,1000*fluxsbc1)
% title('Variation of stator back-core flux 1')
% ylabel('flux (mWb)')

% figure
% plot(tetatotal2,1000*fluxrp1)
% title('Variation of rotor pole flux 1')
% ylabel('flux (mWb)')

fluxrbc1=0.5*(fluxrp1-fluxrp2-fluxrp3);
fluxrbc2=0.5*(fluxrp1+fluxrp2-fluxrp3);
fluxrbc3=0.5*(fluxrp1+fluxrp2+fluxrp3);

% figure
% plot(tetatotal2,1000*fluxrbc1)
% title('Variation of rotor back-core flux 1')
% ylabel('flux (mWb)')

end


FDsp1=abs(fluxsp1/(L*tss(3)));  %% One stator pole flux density
FDsbc1=abs(fluxsbc1/(L*Wbcs));     %% One stator back core flux density
FDrp1=abs(fluxrp1/(L*tr));       %% One rotor pole flux density
FDrbc1=abs(fluxrbc1/(L*Wbcr));      %% One rotor back core flux density

% figure
% plot(tetatotal2,FDsp1)
% title('Variation of one stator pole 1 flux density')
% ylabel('flux density(T)')
% 
% 
% figure
% plot(tetatotal2,FDsbc1)
% title('Variation of stator back-core flux density 1')
% ylabel('flux density (T)')
% 
% 
% figure
% plot(tetatotal2,FDrp1)
% title('Variation of rotor pole flux density 1')
% ylabel('flux density (T)')
% 
% 
% figure
% plot(tetatotal2,FDrbc1)
% title('Variation of rotor back-core flux density 1')
% ylabel('flux density (T)')

%% calculation of flux density harmonics in different parts of the machine

time=(tetatotal2*pi)/(180*n);   %% time in sec
TS=(time(end))/(length(time)-1);   %%% sampling period
FS=1/TS;     %% sampling frequency
%FS=round(FS,-2);
f = FS*(0:(length(time)/1500))/length(time);

Y=fft(FDsp1);
P2 = abs(Y/length(time));
Psp1 = P2(1:length(time)/1500+1);
Psp1(2:end-1) = 2*Psp1(2:end-1);

% figure
% plot(f,Psp1)
% title('Flux harmonics distribution in One stator tooth')
% ylabel('harmonic magnitude (T)')


Y=fft(FDsbc1);
P2 = abs(Y/length(time));
Psbc1 = P2(1:length(time)/1500+1);
Psbc1(2:end-1) = 2*Psbc1(2:end-1);

% figure
% plot(f,Psbc1)
% title('Flux harmonics distribution in One stator back core')
% ylabel('harmonic magnitude (T)')


Y=fft(FDrp1);
P2 = abs(Y/length(time));
Prp1 = P2(1:length(time)/1500+1);
Prp1(2:end-1) = 2*Prp1(2:end-1);

% figure
% plot(f,Prp1)
% title('Flux harmonics distribution in One rotor tooth')
% ylabel('harmonic magnitude (T)')


Y=fft(FDrbc1);
P2 = abs(Y/length(time));
Prbc1 = P2(1:length(time)/1500+1);
Prbc1(2:end-1) = 2*Prbc1(2:end-1);

% figure
% plot(f,Prbc1)
% title('Flux harmonics distribution in One rotor back core')
% ylabel('harmonic magnitude (T)')


%% calculation of hyteresis, eddy current, and excess losses of the core (Pcore)

%%%% in one stator pole

counter=1;
for jj=1:(length(f)-2)
   if counter>10
       break
   end
   
   if Psp1(jj+1)-Psp1(jj)>0  && Psp1(jj+1)-Psp1(jj+2)>0
   fsp1(counter)=f(jj+1);
   Bsp1(counter)=Psp1(jj+1);
   counter=counter+1;
   end
    
end


counter=1;
for jj=1:(length(f)-2)
   if counter>10
       break
   end
   
   if Psbc1(jj+1)-Psbc1(jj)>0  && Psbc1(jj+1)-Psbc1(jj+2)>0
   fsbc1(counter)=f(jj+1);
   Bsbc1(counter)=Psbc1(jj+1);
   counter=counter+1;
   end
    
end


counter=1;
for jj=1:(length(f)-2)
   if counter>10
       break
   end
   
   if Prp1(jj+1)-Prp1(jj)>0  && Prp1(jj+1)-Prp1(jj+2)>0
   frp1(counter)=f(jj+1);
   Brp1(counter)=Prp1(jj+1);
   counter=counter+1;
   end
    
end

counter=1;
for jj=1:(length(f)-2)
   if counter>10
       break
   end
   
   if Prbc1(jj+1)-Prbc1(jj)>0  && Prbc1(jj+1)-Prbc1(jj+2)>0
   frbc1(counter)=f(jj+1);
   Brbc1(counter)=Prbc1(jj+1);
   counter=counter+1;
   end
    
end

%%%% calculation of core losses in stator teeth


% freq=[1 2 3 7 10 20 40 70 100 200 400 1000];
% kee=[1.5 0.7 0.5 0.2 0.1 0.06 0.03 0.015 0.008 0.003 0.001 0.0002];
% HHH= polyfit(freq,kee,11);
% kesp1(1)=HHH(1)*fsp1(1)^11+HHH(2)*fsp1(1)^10+HHH(3)*fsp1(1)^9+HHH(4)*fsp1(1)^8+HHH(5)*fsp1(1)^7+HHH(6)*fsp1(1)^6+HHH(7)*fsp1(1)^5+HHH(8)*fsp1(1)^4+HHH(9)*fsp1(1)^3+HHH(10)*fsp1(1)^2+HHH(11)*fsp1(1)+HHH(12);


Pesp1total=0;
for jj=1:length(fsp1)
   if fsp1(jj)<100
       kesp1(jj)=1.25*fsp1(jj);
       kesp1(jj)=1/kesp1(jj);
   else if fsp1(jj)<200
    kesp1(jj)=125+2.08*(fsp1(jj)-100);
    kesp1(jj)=1/kesp1(jj);
       else if fsp1(jj)<400
               kesp1(jj)=333+3.335*(fsp1(jj)-200);
               kesp1(jj)=1/kesp1(jj);
           else
               kesp1(jj)=1000+6.667*(fsp1(jj)-400);
               kesp1(jj)=1/kesp1(jj);
           end
       end
   end
               
               
   Pesp1(jj)=kesp1(jj)*(fsp1(jj)^2)*(Bsp1(jj)^2);
   Pesp1total=Pesp1total+Pesp1(jj);
end

Pexsp1total=0;
for jj=1:length(fsp1)
   if fsp1(jj)<100
       kexsp1(jj)=0.0011+(1.4e-3*(fsp1(jj)-50))/50;
   else 
    kexsp1(jj)=0.0025+(1.7e-3*(fsp1(jj)-100))/300; 
   end
   Pexsp1(jj)=kexsp1(jj)*(fsp1(jj)^1.5)*(Bsp1(jj)^1.5);
   Pexsp1total=Pexsp1total+Pexsp1(jj);
end


Phsp1total=0;
for jj=1:length(fsp1)
   if Bsp1(jj)<0.1
       Phsp1(jj)=0;
   else if Bsp1(jj)<0.6
           Phsp1(jj)=fsp1(jj)*(0.001+0.012*(Bsp1(jj)-0.1));
   else if Bsp1(jj)<1.1
           Phsp1(jj)=fsp1(jj)*(0.007+0.024*(Bsp1(jj)-0.6));
       else
           Phsp1(jj)=fsp1(jj)*(0.019+0.04625*(Bsp1(jj)-1.1));
       end
       end
   end
   Phsp1total=Phsp1total+Phsp1(jj);
end

Pcsp1=Pesp1total+Pexsp1total+Phsp1total;    %%% Losses in Watts per Kg in one stator pole
Pcsp=Pcsp1*Mts;  %%% core losses in all teeth


%%%% calculation of core losses in rotor teeth



Perp1total=0;
for jj=1:length(frp1)
   if frp1(jj)<100
       kerp1(jj)=1.25*frp1(jj);
       kerp1(jj)=1/kerp1(jj);
   else if frp1(jj)<200
    kerp1(jj)=125+2.08*(frp1(jj)-100);
    kerp1(jj)=1/kerp1(jj);
       else if frp1(jj)<400
               kerp1(jj)=333+3.335*(frp1(jj)-200);
               kerp1(jj)=1/kerp1(jj);
           else
               kerp1(jj)=1000+6.667*(frp1(jj)-400);
               kerp1(jj)=1/kerp1(jj);
           end
       end
   end
               
               
   Perp1(jj)=kerp1(jj)*(frp1(jj)^2)*(Brp1(jj)^2);
   Perp1total=Perp1total+Perp1(jj);
end

Pexrp1total=0;
for jj=1:length(frp1)
   if frp1(jj)<100
       kexrp1(jj)=0.0011+(1.4e-3*(frp1(jj)-50))/50;
   else 
    kexrp1(jj)=0.0025+(1.7e-3*(frp1(jj)-100))/300; 
   end
   Pexrp1(jj)=kexrp1(jj)*(frp1(jj)^1.5)*(Brp1(jj)^1.5);
   Pexrp1total=Pexrp1total+Pexrp1(jj);
end


Phrp1total=0;
for jj=1:length(frp1)
   if Brp1(jj)<0.1
       Phrp1(jj)=0;
   else if Brp1(jj)<0.6
           Phrp1(jj)=frp1(jj)*(0.001+0.012*(Brp1(jj)-0.1));
   else if Brp1(jj)<1.1
           Phrp1(jj)=frp1(jj)*(0.007+0.024*(Brp1(jj)-0.6));
       else
           Phrp1(jj)=frp1(jj)*(0.019+0.04625*(Brp1(jj)-1.1));
       end
       end
   end
   Phrp1total=Phrp1total+Phrp1(jj);
end

Pcrp1=Perp1total+Pexrp1total+Phrp1total;    %%% Losses in Watts per Kg in one rotor pole
Pcrp=Pcrp1*Mtr;  %%% core losses in all teeth



%%%% calculation of core losses in stator back core

Pesbc1total=0;
for jj=1:length(fsbc1)
   if fsbc1(jj)<100
       kesbc1(jj)=1.25*fsbc1(jj);
       kesbc1(jj)=1/kesbc1(jj);
   else if fsbc1(jj)<200
    kesbc1(jj)=125+2.08*(fsbc1(jj)-100);
    kesbc1(jj)=1/kesbc1(jj);
       else if fsbc1(jj)<400
               kesbc1(jj)=333+3.335*(fsbc1(jj)-200);
               kesbc1(jj)=1/kesbc1(jj);
           else
               kesbc1(jj)=1000+6.667*(fsbc1(jj)-400);
               kesbc1(jj)=1/kesbc1(jj);
           end
       end
   end
               
               
   Pesbc1(jj)=kesbc1(jj)*(fsbc1(jj)^2)*(Bsbc1(jj)^2);
   Pesbc1total=Pesbc1total+Pesbc1(jj);
end

Pexsbc1total=0;
for jj=1:length(fsbc1)
   if fsbc1(jj)<100
       kexsbc1(jj)=0.0011+(1.4e-3*(fsbc1(jj)-50))/50;
   else 
    kexsbc1(jj)=0.0025+(1.7e-3*(fsbc1(jj)-100))/300; 
   end
   Pexsbc1(jj)=kexsbc1(jj)*(fsbc1(jj)^1.5)*(Bsbc1(jj)^1.5);
   Pexsbc1total=Pexsbc1total+Pexsbc1(jj);
end


Phsbc1total=0;
for jj=1:length(fsbc1)
   if Bsbc1(jj)<0.1
       Phsbc1(jj)=0;
   else if Bsbc1(jj)<0.6
           Phsbc1(jj)=fsbc1(jj)*(0.001+0.012*(Bsbc1(jj)-0.1));
   else if Bsbc1(jj)<1.1
           Phsbc1(jj)=fsbc1(jj)*(0.007+0.024*(Bsbc1(jj)-0.6));
       else
           Phsbc1(jj)=fsbc1(jj)*(0.019+0.04625*(Bsbc1(jj)-1.1));
       end
       end
   end
   Phsbc1total=Phsbc1total+Phsbc1(jj);
end

Pcsbc1=Pesbc1total+Pexsbc1total+Phsbc1total;    %%% Losses in Watts per Kg in one stator back core region
Pcsbc=Pcsbc1*Mbcs;  %%% core losses in all stator back core



%%%% calculation of core losses in rotor back core

Perbc1total=0;
for jj=1:length(frbc1)
   if frbc1(jj)<100
       kerbc1(jj)=1.25*frbc1(jj);
       kerbc1(jj)=1/kerbc1(jj);
   else if frbc1(jj)<200
    kerbc1(jj)=125+2.08*(frbc1(jj)-100);
    kerbc1(jj)=1/kerbc1(jj);
       else if frbc1(jj)<400
               kerbc1(jj)=333+3.335*(frbc1(jj)-200);
               kerbc1(jj)=1/kerbc1(jj);
           else
               kerbc1(jj)=1000+6.667*(frbc1(jj)-400);
               kerbc1(jj)=1/kerbc1(jj);
           end
       end
   end
               
               
   Perbc1(jj)=kerbc1(jj)*(frbc1(jj)^2)*(Brbc1(jj)^2);
   Perbc1total=Perbc1total+Perbc1(jj);
end

Pexrbc1total=0;
for jj=1:length(frbc1)
   if frbc1(jj)<100
       kexrbc1(jj)=0.0011+(1.4e-3*(frbc1(jj)-50))/50;
   else 
    kexrbc1(jj)=0.0025+(1.7e-3*(frbc1(jj)-100))/300; 
   end
   Pexrbc1(jj)=kexrbc1(jj)*(frbc1(jj)^1.5)*(Brbc1(jj)^1.5);
   Pexrbc1total=Pexrbc1total+Pexrbc1(jj);
end


Phrbc1total=0;
for jj=1:length(frbc1)
   if Brbc1(jj)<0.1
       Phrbc1(jj)=0;
   else if Brbc1(jj)<0.6
           Phrbc1(jj)=frbc1(jj)*(0.001+0.012*(Brbc1(jj)-0.1));
   else if Brbc1(jj)<1.1
           Phrbc1(jj)=frbc1(jj)*(0.007+0.024*(Brbc1(jj)-0.6));
       else
           Phrbc1(jj)=frbc1(jj)*(0.019+0.04625*(Brbc1(jj)-1.1));
       end
       end
   end
   Phrbc1total=Phrbc1total+Phrbc1(jj);
end

Pcrbc1=Perbc1total+Pexrbc1total+Phrbc1total;    %%% Losses in Watts per Kg in one rotor back core region
Pcrbc=Pcrbc1*Mbcr;  %%% core losses in all rotor back core


%%% calculation of total core losses of the machine
Pc=Pcsp+Pcrp+Pcsbc+Pcrbc;


%% Calculation of copper losses
% Isquare=0;
% for j=1:i
%     Isquare=Isquare+Di1(j)^2;
% end
% Irms1=sqrt(Isquare/i);   %%% RMS value of current in two series winding
% Irms=Ns*Irms1/(2*q)    %%% Phase RMS current

Isquare1=0;
for j=1:q*length(x)
    Isquare1=Isquare1+Dia(j)^2;
end
Irms1=sqrt(Isquare1/(q*length(x)));     %%% RMS value of current in two series winding
Pcu1=1.1*R*(Irms1^2);    %% total copper loss (1.1 due to skin effect)
%Pcu=(Ns/2)*R*(Irms1^2)    %% total copper loss ()
Irms=Ns*Irms1/(2*q);    %%% Phase RMS current

%%%  calculation of core losses due to overlaps in conduction (in both former and latter phases)

Isquare2=0;
for j=length(x):length(x)+i
    Isquare2=Isquare2+Dia(j)^2;
end
Irms2=sqrt(Isquare2/(q*length(x)));
Pcu2=1.1*R*(Irms2^2);


Isquare3=0;
for j=length(x):length(x)+i
    Isquare3=Isquare3+Dic(j)^2;
end
Irms3=sqrt(Isquare3/(q*length(x)));
Pcu3=1.1*R*(Irms3^2);

Pcu=((Pcu1+Pcu2+Pcu3)*Ns)/(2*q);

%% calculation of total losses of the machine(core and copper losses) and efficiency
Loss=Pc+Pcu ;     %%%% fraction and windage lossses have not been considered

Tavg=mean(DTtotal(length(x):2*length(x)));
Tav(z)=Tavg;    %%% Average torque in each iteration
Pout=Tavg*nm;
Pin=Pout+Loss;
Iavgin=mean(Ditotal(length(x):2*length(x)));
Iin(z)=Iavgin;   %%% average input current
%Pin=Iavgin*V  %%% false

efficiency=100*Pout/Pin;    %%%% fraction and windage losses have not been considered
efficiency=efficiency-(pf+pf2+pf3);
eta(z)=efficiency;

Ripple=100*(max(DTtotal(length(x):2*length(x)))-min(DTtotal(length(x):2*length(x))))/max(DTtotal(length(x):2*length(x)));
Tripple(z)=Ripple;  %% torque ripple

TRV=Tavg/Vmnoshaft;    %%%%mean torque per active motor volume
TRM=Tavg/Mactive;    %%% torque density in N.m./kg
TRM=(-1)*(TRM);
TRM=TRM+2*(pf+pf2+pf3);

TMM(z)=TRM;     %%% saving Torque density in each iteration (N.m./kg)
TMV(z)=TRV;    %%% saving Torque density in each iteration  (N.m./m3)
z=z+1;




%     end
%   end
%   end
%   end
% end


% figure
% plot(zz,TMV)
% title('torque density (torque/active iron volume) in each iteration')
% xlabel('iteration number')
% ylabel('torque density (torque/active iron volume)')
% 
% figure
% plot(zz,TMM)
% title('torque density (torque/total active mass) in each iteration')
% xlabel('iteration number')
% ylabel('torque density (torque/total active mass)')
% 
% 
% figure
% plot(zz,hsoverg)
% title('stator height over g (hs/g) in each iteration')
% xlabel('iteration number')
% ylabel('stator height over g (hs/g)')
% 
% 
% figure
% plot(zz,Tav)
% title('Average torque in each iteration')
% xlabel('iteration number')
% ylabel('Average torque')
% 
% 
% 
% figure
% plot(zz,Rseries)
% title('two series poles resistance in each iteration')
% xlabel('iteration number')
% ylabel('two series poles resistance (ohms)')
% 
% 
% figure
% plot(zz,Tripple)
% title('Torque Ripple in each iteration')
% xlabel('iteration number')
% ylabel('Torque Ripple')
% 
% figure
% plot(zz,Iin)
% title('Avearge input current in each iteration')
% xlabel('iteration number')
% ylabel('Avearge input current')
% 
% figure
% plot(zz,turnnumber)
% title('Number of turns per pole in each iteration')
% xlabel('iteration number')
% ylabel('Number of turns per pole')
% 
% 
% figure
% plot(zz,Ippmax)
% title('Maximum allowable current in each iteration')
% xlabel('iteration number')
% ylabel('Maximum allowable current')
% 
% 
% figure
% plot(zz,wireD)
% title('wire diameter in each iteration')
% xlabel('iteration number')
% ylabel('wire diameter')
% 
% figure
% plot(zz,Dostator)
% title('Stator outer diameter in each iteration')
% xlabel('iteration number')
% ylabel('Stator outer diameter')
% 
% figure
% plot(zz,eta)
% title('efficiency in each iteration')
% xlabel('iteration number')
% ylabel('efficiency')
% 
% 
% figure
% plot(zz,Dshaft)
% title('Shaft diameter in each iteration')
% xlabel('iteration number')
% ylabel('Shaft diameter')

%%%% Saving genetic algorithm data in each iteration
inin(1,iterations)=lambdag;
inin(2,iterations)=tslambda;

%inin(3,iterations)=trlambda;
inin(3,iterations)=tslambda;

inin(4,iterations)=Dor*1000;
inin(5,iterations)=epepep;
inin(6,iterations)=(tetaonon*180)/pi;
pfun(iterations)=pf;
pfun2(iterations)=pf2;
pfun3(iterations)=pf3;
Hstatortooth(iterations)=hs*1000;
Hrotortooth(iterations)=hr*1000;
stackL(iterations)=L*1000;
%totalL(iterations)=Ltotal*1000;
Dostat(iterations)=Dos*1000;
Dshaftt(iterations)=Ds*1000;
TT(iterations)=Tavg;
TM(iterations)=TRM;   %%%% saving torque density value in each iteration
eff(iterations)=efficiency;
MMM(iterations)=Mactive;
Nturn(iterations)=N;
WireD(iterations)=Dw*1000;
Resistance2pole(iterations)=Rseries;
coreloss(iterations)=Pc;
Culoss(iterations)=Pcu;
losstotal(iterations)=Loss;
Iavginput(iterations)=Iavgin;
powerout(iterations)=Pout;
gap(iterations)=g;

% figure
% plot(1:iterations,inin(1,1:iterations))
% xlabel('iterations')
% ylabel('lambda/g')
% 
% figure
% plot(1:iterations,inin(2,1:iterations))
% xlabel('iterations')
% ylabel('ts/lambda')
% 
% 
% figure
% plot(1:iterations,inin(3,1:iterations))
% xlabel('iterations')
% ylabel('tr/lambda')
% 
% 
% figure
% plot(1:iterations,inin(4,1:iterations))
% xlabel('iterations')
% ylabel('Dor')
% 
% figure
% plot(1:iterations,inin(5,1:iterations))
% xlabel('iterations')
% ylabel('excitation period')
% 
% figure
% plot(1:iterations,inin(6,1:iterations))
% xlabel('iterations')
% ylabel('teta on')
% 
% figure
% plot(1:iterations,Dostat(1:iterations))
% xlabel('iterations')
% ylabel('Stator outer diameter')
% 
% figure
% plot(1:iterations,(-1).*TM(1:iterations))
% xlabel('iterations')
% ylabel('torque density')

